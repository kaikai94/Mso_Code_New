; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\overlapped_send.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GetMemoryNumPerBucket@CDynamicMemoryContainer@@QAEKXZ ; CDynamicMemoryContainer::GetMemoryNumPerBucket
PUBLIC	?GetMemory@CWriteMemoryHandle@@QAEPAUMEMORY_OBJECT@@XZ ; CWriteMemoryHandle::GetMemory
PUBLIC	?SetMemory@CWriteMemoryHandle@@QAEXPAUMEMORY_OBJECT@@K@Z ; CWriteMemoryHandle::SetMemory
PUBLIC	?GetMaxMemorySize@CWriteMemoryHandle@@QAEKXZ	; CWriteMemoryHandle::GetMaxMemorySize
PUBLIC	?Initialize@COverlappedSend@@QAEXXZ		; COverlappedSend::Initialize
PUBLIC	?GetMaxBufferSize@COverlappedSend@@QAEKXZ	; COverlappedSend::GetMaxBufferSize
PUBLIC	?AllocBuffer@COverlappedSend@@QAEHK@Z		; COverlappedSend::AllocBuffer
PUBLIC	?SendBuffer@COverlappedSend@@QAEHXZ		; COverlappedSend::SendBuffer
PUBLIC	?Release@COverlappedSend@@QAEXXZ		; COverlappedSend::Release
PUBLIC	??0COverlappedSend@@QAE@XZ			; COverlappedSend::COverlappedSend
PUBLIC	??1COverlappedSend@@QAE@XZ			; COverlappedSend::~COverlappedSend
PUBLIC	?GetDMWrite@CNetwork@@QAEPAVCDynamicMemoryContainer@@XZ ; CNetwork::GetDMWrite
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__WSASend@28:PROC
EXTRN	?Alloc@CDynamicMemoryContainer@@QAEPADXZ:PROC	; CDynamicMemoryContainer::Alloc
EXTRN	?Free@CDynamicMemoryContainer@@QAEXPAD@Z:PROC	; CDynamicMemoryContainer::Free
EXTRN	?InitializeMemory@CWriteMemoryHandle@@QAEXXZ:PROC ; CWriteMemoryHandle::InitializeMemory
EXTRN	??0CWriteMemoryHandle@@QAE@XZ:PROC		; CWriteMemoryHandle::CWriteMemoryHandle
EXTRN	??0COverlapped@@QAE@XZ:PROC			; COverlapped::COverlapped
EXTRN	??1COverlapped@@QAE@XZ:PROC			; COverlapped::~COverlapped
EXTRN	?PostDisconnectEvent@@YAXK@Z:PROC		; PostDisconnectEvent
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COverlappedSend@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COverlappedSend@@QAE@XZ$0
__ehfuncinfo$??1COverlappedSend@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1COverlappedSend@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COverlappedSend@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COverlappedSend@@QAE@XZ$0
__ehfuncinfo$??0COverlappedSend@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0COverlappedSend@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetDMWrite@CNetwork@@QAEPAVCDynamicMemoryContainer@@XZ
_TEXT	SEGMENT
?GetDMWrite@CNetwork@@QAEPAVCDynamicMemoryContainer@@XZ PROC ; CNetwork::GetDMWrite, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 73
  00000	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00003	c3		 ret	 0
?GetDMWrite@CNetwork@@QAEPAVCDynamicMemoryContainer@@XZ ENDP ; CNetwork::GetDMWrite
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1COverlappedSend@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COverlappedSend@@QAE@XZ PROC				; COverlappedSend::~COverlappedSend, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 197
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1COverlappedSend@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 73
  00029	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 192
  0002c	ff 76 4c	 push	 DWORD PTR [esi+76]
; Line 197
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; Line 192
  00036	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00039	e8 00 00 00 00	 call	 ?Free@CDynamicMemoryContainer@@QAEXPAD@Z ; CDynamicMemoryContainer::Free
; Line 193
  0003e	8d 46 50	 lea	 eax, DWORD PTR [esi+80]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; Line 200
  00048	8b ce		 mov	 ecx, esi
  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00051	e8 00 00 00 00	 call	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COverlappedSend@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
__ehhandler$??1COverlappedSend@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1COverlappedSend@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1COverlappedSend@@QAE@XZ ENDP				; COverlappedSend::~COverlappedSend
; Function compile flags: /Ogtp
;	COMDAT ??0COverlappedSend@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COverlappedSend@@QAE@XZ PROC				; COverlappedSend::COverlappedSend, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 8
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0COverlappedSend@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0COverlapped@@QAE@XZ	; COverlapped::COverlapped
  0002e	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00038	e8 00 00 00 00	 call	 ??0CWriteMemoryHandle@@QAE@XZ ; CWriteMemoryHandle::CWriteMemoryHandle
; Line 17
  0003d	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; Line 10
  00044	8d 46 50	 lea	 eax, DWORD PTR [esi+80]
  00047	0f 57 c0	 xorps	 xmm0, xmm0
; Line 18
  0004a	f3 0f 7f 06	 movdqu	 XMMWORD PTR [esi], xmm0
  0004e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; Line 10
  00055	68 e8 03 00 00	 push	 1000			; 000003e8H
  0005a	50		 push	 eax
; Line 19
  0005b	c7 46 1c ff ff
	ff ff		 mov	 DWORD PTR [esi+28], -1
; Line 20
  00062	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
; Line 21
  00069	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; Line 22
  00070	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
; Line 10
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8
; Line 11
  0007d	8b c6		 mov	 eax, esi
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5e		 pop	 esi
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COverlappedSend@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
__ehhandler$??0COverlappedSend@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0COverlappedSend@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0COverlappedSend@@QAE@XZ ENDP				; COverlappedSend::COverlappedSend
; Function compile flags: /Ogtp
;	COMDAT ?Release@COverlappedSend@@QAEXXZ
_TEXT	SEGMENT
?Release@COverlappedSend@@QAEXXZ PROC			; COverlappedSend::Release, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 191
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; Line 192
  00003	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00006	ff 76 4c	 push	 DWORD PTR [esi+76]
  00009	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  0000c	e8 00 00 00 00	 call	 ?Free@CDynamicMemoryContainer@@QAEXPAD@Z ; CDynamicMemoryContainer::Free
; Line 193
  00011	8d 46 50	 lea	 eax, DWORD PTR [esi+80]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  0001b	5e		 pop	 esi
; Line 194
  0001c	c3		 ret	 0
?Release@COverlappedSend@@QAEXXZ ENDP			; COverlappedSend::Release
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?SendBuffer@COverlappedSend@@QAEHXZ
_TEXT	SEGMENT
_wsabuf$ = -9608					; size = 9600
_this$ = -8						; size = 4
_result$ = -4						; size = 4
?SendBuffer@COverlappedSend@@QAEHXZ PROC		; COverlappedSend::SendBuffer, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 50
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 88 25 00 00	 mov	 eax, 9608		; 00002588H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 89
  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
; Line 93
  0001a	8b 5d f8	 mov	 ebx, DWORD PTR _this$[ebp]
; Line 94
  0001d	0f 6e 43 1c	 movd	 mm0, DWORD PTR [ebx+28]
; Line 95
  00021	0f 6e cb	 movd	 mm1, ebx
; Line 97
  00024	8b c3		 mov	 eax, ebx
; Line 98
  00026	83 c0 18	 add	 eax, 24			; 00000018H
; Line 99
  00029	0f 6e d0	 movd	 mm2, eax
; Line 101
  0002c	c7 43 14 01 00
	00 00		 mov	 DWORD PTR [ebx+20], 1
; Line 102
  00033	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
; Line 104
  00036	83 c3 30	 add	 ebx, 48			; 00000030H
; Line 106
  00039	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
; Line 107
  0003c	3b c8		 cmp	 ecx, eax
; Line 108
  0003e	76 02		 jbe	 SHORT $lb_start$10
; Line 110
  00040	8b c8		 mov	 ecx, eax
$lb_start$10:
; Line 114
  00042	8b 5b 08	 mov	 ebx, DWORD PTR [ebx+8]
; Line 115
  00045	8d bd 78 da ff
	ff		 lea	 edi, DWORD PTR _wsabuf$[ebp]
; Line 116
  0004b	0f 6e df	 movd	 mm3, edi
; Line 117
  0004e	33 d2		 xor	 edx, edx
$lb_loop$11:
; Line 119
  00050	0f b6 43 0a	 movzx	 eax, BYTE PTR [ebx+10]
; Line 120
  00054	8b f3		 mov	 esi, ebx
; Line 121
  00056	83 c6 0c	 add	 esi, 12			; 0000000cH
; Line 122
  00059	03 f0		 add	 esi, eax
; Line 124
  0005b	89 77 04	 mov	 DWORD PTR [edi+4], esi
; Line 125
  0005e	0f b6 43 09	 movzx	 eax, BYTE PTR [ebx+9]
; Line 126
  00062	89 07		 mov	 DWORD PTR [edi], eax
; Line 128
  00064	42		 inc	 edx
; Line 130
  00065	83 c7 08	 add	 edi, 8
; Line 131
  00068	2b c8		 sub	 ecx, eax
; Line 132
  0006a	76 04		 jbe	 SHORT $lb_end$12
; Line 134
  0006c	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; Line 135
  0006e	eb e0		 jmp	 SHORT $lb_loop$11
$lb_end$12:
; Line 140
  00070	0f 7e c0	 movd	 eax, mm0
; Line 141
  00073	0f 7e ce	 movd	 esi, mm1
; Line 142
  00076	0f 7e d1	 movd	 ecx, mm2
; Line 143
  00079	0f 7e db	 movd	 ebx, mm3
; Line 144
  0007c	0f 77		 emms
; Line 147
  0007e	6a 00		 push	 0
; Line 148
  00080	56		 push	 esi
; Line 149
  00081	6a 00		 push	 0
; Line 150
  00083	51		 push	 ecx
; Line 151
  00084	52		 push	 edx
; Line 152
  00085	53		 push	 ebx
; Line 153
  00086	50		 push	 eax
; Line 155
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSASend@28
; Line 157
  0008d	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax
; Line 170
  00090	83 7d fc ff	 cmp	 DWORD PTR _result$[ebp], -1
  00094	75 2e		 jne	 SHORT $seg_true$13
; Line 173
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0009c	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax
; Line 175
  0009f	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000a4	74 1e		 je	 SHORT $seg_true$13
; Line 178
  000a6	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  000ab	74 0e		 je	 SHORT $seg_false$14
; Line 181
  000ad	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	ff 70 2c	 push	 DWORD PTR [eax+44]
  000b3	e8 00 00 00 00	 call	 ?PostDisconnectEvent@@YAXK@Z ; PostDisconnectEvent
  000b8	83 c4 04	 add	 esp, 4
$seg_false$14:
; Line 184
  000bb	33 c0		 xor	 eax, eax
; Line 189
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
$seg_true$13:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	b8 01 00 00 00	 mov	 eax, 1
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?SendBuffer@COverlappedSend@@QAEHXZ ENDP		; COverlappedSend::SendBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?AllocBuffer@COverlappedSend@@QAEHK@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?AllocBuffer@COverlappedSend@@QAEHK@Z PROC		; COverlappedSend::AllocBuffer, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 26
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 27
  00004	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00007	c1 e0 06	 shl	 eax, 6
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 27
  0000a	85 c0		 test	 eax, eax
  0000c	75 25		 jne	 SHORT $LN17@AllocBuffe
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 73
  0000e	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 33
  00011	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00014	e8 00 00 00 00	 call	 ?Alloc@CDynamicMemoryContainer@@QAEPADXZ ; CDynamicMemoryContainer::Alloc
  00019	8b c8		 mov	 ecx, eax
; Line 34
  0001b	85 c9		 test	 ecx, ecx
  0001d	75 05		 jne	 SHORT $LN1@AllocBuffe
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
; Line 40
  00021	c2 04 00	 ret	 4
$LN1@AllocBuffe:
; File e:\github\mso_code\4dyuchinet_latest\dynamic_memory.h
; Line 31
  00024	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00027	8b 40 68	 mov	 eax, DWORD PTR [eax+104]
  0002a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 20
  0002d	89 4f 4c	 mov	 DWORD PTR [edi+76], ecx
; Line 21
  00030	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN17@AllocBuffe:
; Line 22
  00033	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00036	e8 00 00 00 00	 call	 ?InitializeMemory@CWriteMemoryHandle@@QAEXXZ ; CWriteMemoryHandle::InitializeMemory
  0003b	5f		 pop	 edi
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 39
  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi
; Line 40
  00042	c2 04 00	 ret	 4
?AllocBuffer@COverlappedSend@@QAEHK@Z ENDP		; COverlappedSend::AllocBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetMaxBufferSize@COverlappedSend@@QAEKXZ
_TEXT	SEGMENT
?GetMaxBufferSize@COverlappedSend@@QAEKXZ PROC		; COverlappedSend::GetMaxBufferSize, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 27
  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	c1 e0 06	 shl	 eax, 6
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 15
  00006	c3		 ret	 0
?GetMaxBufferSize@COverlappedSend@@QAEKXZ ENDP		; COverlappedSend::GetMaxBufferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Initialize@COverlappedSend@@QAEXXZ
_TEXT	SEGMENT
?Initialize@COverlappedSend@@QAEXXZ PROC		; COverlappedSend::Initialize, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 17
  00000	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00007	0f 57 c0	 xorps	 xmm0, xmm0
; Line 18
  0000a	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  0000e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; Line 19
  00015	c7 41 1c ff ff
	ff ff		 mov	 DWORD PTR [ecx+28], -1
; Line 20
  0001c	c7 41 14 03 00
	00 00		 mov	 DWORD PTR [ecx+20], 3
; Line 21
  00023	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
; Line 22
  0002a	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
; Line 23
  00031	c3		 ret	 0
?Initialize@COverlappedSend@@QAEXXZ ENDP		; COverlappedSend::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetMaxMemorySize@CWriteMemoryHandle@@QAEKXZ
_TEXT	SEGMENT
?GetMaxMemorySize@CWriteMemoryHandle@@QAEKXZ PROC	; CWriteMemoryHandle::GetMaxMemorySize, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 27
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c1 e0 06	 shl	 eax, 6
  00005	c3		 ret	 0
?GetMaxMemorySize@CWriteMemoryHandle@@QAEKXZ ENDP	; CWriteMemoryHandle::GetMaxMemorySize
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?SetMemory@CWriteMemoryHandle@@QAEXPAUMEMORY_OBJECT@@K@Z
_TEXT	SEGMENT
_pMemory$ = 8						; size = 4
_dwMemObjNum$ = 12					; size = 4
?SetMemory@CWriteMemoryHandle@@QAEXPAUMEMORY_OBJECT@@K@Z PROC ; CWriteMemoryHandle::SetMemory, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 19
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 20
  00003	8b 45 08	 mov	 eax, DWORD PTR _pMemory$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; Line 21
  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwMemObjNum$[ebp]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
; Line 22
  0000e	e8 00 00 00 00	 call	 ?InitializeMemory@CWriteMemoryHandle@@QAEXXZ ; CWriteMemoryHandle::InitializeMemory
; Line 23
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?SetMemory@CWriteMemoryHandle@@QAEXPAUMEMORY_OBJECT@@K@Z ENDP ; CWriteMemoryHandle::SetMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetMemory@CWriteMemoryHandle@@QAEPAUMEMORY_OBJECT@@XZ
_TEXT	SEGMENT
?GetMemory@CWriteMemoryHandle@@QAEPAUMEMORY_OBJECT@@XZ PROC ; CWriteMemoryHandle::GetMemory, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 17
  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetMemory@CWriteMemoryHandle@@QAEPAUMEMORY_OBJECT@@XZ ENDP ; CWriteMemoryHandle::GetMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetMemoryNumPerBucket@CDynamicMemoryContainer@@QAEKXZ
_TEXT	SEGMENT
?GetMemoryNumPerBucket@CDynamicMemoryContainer@@QAEKXZ PROC ; CDynamicMemoryContainer::GetMemoryNumPerBucket, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\dynamic_memory.h
; Line 31
  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetMemoryNumPerBucket@CDynamicMemoryContainer@@QAEKXZ ENDP ; CDynamicMemoryContainer::GetMemoryNumPerBucket
_TEXT	ENDS
END
