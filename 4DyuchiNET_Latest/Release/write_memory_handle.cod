; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\write_memory_handle.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?InitializeMemory@CWriteMemoryHandle@@QAEXXZ	; CWriteMemoryHandle::InitializeMemory
PUBLIC	?Push@CWriteMemoryHandle@@QAEHPADK@Z		; CWriteMemoryHandle::Push
PUBLIC	?OnWrite@CWriteMemoryHandle@@QAEXK@Z		; CWriteMemoryHandle::OnWrite
PUBLIC	??0CWriteMemoryHandle@@QAE@XZ			; CWriteMemoryHandle::CWriteMemoryHandle
EXTRN	?InitializeMemoryObjectChain@@YAXPAUMEMORY_OBJECT@@K@Z:PROC ; InitializeMemoryObjectChain
; Function compile flags: /Ogtp
;	COMDAT ??0CWriteMemoryHandle@@QAE@XZ
_TEXT	SEGMENT
??0CWriteMemoryHandle@@QAE@XZ PROC			; CWriteMemoryHandle::CWriteMemoryHandle, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.cpp
; Line 5
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; Line 13
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00032	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00039	c3		 ret	 0
??0CWriteMemoryHandle@@QAE@XZ ENDP			; CWriteMemoryHandle::CWriteMemoryHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?OnWrite@CWriteMemoryHandle@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwSize$ = 8						; size = 4
?OnWrite@CWriteMemoryHandle@@QAEXK@Z PROC		; CWriteMemoryHandle::OnWrite, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.cpp
; Line 124
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 147
  0000a	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
; Line 148
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _dwSize$[ebp]
; Line 151
  00010	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
; Line 152
  00015	0f 6e c0	 movd	 mm0, eax
; Line 154
  00018	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
; Line 155
  0001b	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
; Line 156
  0001e	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
; Line 157
  00021	2b f9		 sub	 edi, ecx
; Line 158
  00023	0f 6e cf	 movd	 mm1, edi
; Line 159
  00026	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
$lb_loop$4:
; Line 162
  00029	0f b6 7a 09	 movzx	 edi, BYTE PTR [edx+9]
; Line 163
  0002d	3b cf		 cmp	 ecx, edi
; Line 164
  0002f	72 24		 jb	 SHORT $lb_set_length$5
; Line 166
  00031	0f b6 72 0b	 movzx	 esi, BYTE PTR [edx+11]
; Line 167
  00035	01 73 04	 add	 DWORD PTR [ebx+4], esi
; Line 169
  00038	0f 7e 42 08	 movd	 DWORD PTR [edx+8], mm0
; Line 170
  0003c	89 10		 mov	 DWORD PTR [eax], edx
; Line 171
  0003e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; Line 172
  00041	8b 02		 mov	 eax, DWORD PTR [edx]
; Line 173
  00043	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
; Line 175
  00049	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 177
  00050	92		 xchg	 eax, edx
; Line 178
  00051	2b cf		 sub	 ecx, edi
; Line 179
  00053	75 d4		 jne	 SHORT $lb_loop$4
$lb_set_length$5:
; Line 183
  00055	00 4a 0a	 add	 BYTE PTR [edx+10], cl
; Line 184
  00058	28 4a 09	 sub	 BYTE PTR [edx+9], cl
$lb_set_obj$6:
; Line 187
  0005b	89 53 08	 mov	 DWORD PTR [ebx+8], edx
; Line 188
  0005e	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; Line 190
  00061	0f 7e c9	 movd	 ecx, mm1
; Line 191
  00064	0b c9		 or	 ecx, ecx
; Line 192
  00066	75 03		 jne	 SHORT $lb_end$7
; Line 193
  00068	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
$lb_end$7:
; Line 197
  0006b	0f 77		 emms
; Line 144
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
; Line 200
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?OnWrite@CWriteMemoryHandle@@QAEXK@Z ENDP		; CWriteMemoryHandle::OnWrite
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?Push@CWriteMemoryHandle@@QAEHPADK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
_len$ = 12						; size = 4
?Push@CWriteMemoryHandle@@QAEHPADK@Z PROC		; CWriteMemoryHandle::Push, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.cpp
; Line 24
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 44
  0000a	33 c0		 xor	 eax, eax
; Line 46
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
; Line 47
  0000f	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
; Line 48
  00012	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; Line 50
  00015	3b ca		 cmp	 ecx, edx
; Line 51
  00017	77 67		 ja	 SHORT $lb_false$3
; Line 54
  00019	29 4b 04	 sub	 DWORD PTR [ebx+4], ecx
; Line 55
  0001c	01 4b 14	 add	 DWORD PTR [ebx+20], ecx
; Line 56
  0001f	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
$lb_loop$4:
; Line 59
  00022	33 c0		 xor	 eax, eax
; Line 61
  00024	0f b6 72 08	 movzx	 esi, BYTE PTR [edx+8]
; Line 63
  00028	3b ce		 cmp	 ecx, esi
; Line 64
  0002a	76 06		 jbe	 SHORT $lb_cpy$5
$lb_reset_length$6:
; Line 68
  0002c	2b ce		 sub	 ecx, esi
; Line 69
  0002e	8b c1		 mov	 eax, ecx
; Line 70
  00030	8b ce		 mov	 ecx, esi
$lb_cpy$5:
; Line 74
  00032	8b fa		 mov	 edi, edx
; Line 75
  00034	83 c7 0c	 add	 edi, 12			; 0000000cH
; Line 76
  00037	0f b6 72 0b	 movzx	 esi, BYTE PTR [edx+11]
; Line 77
  0003b	03 fe		 add	 edi, esi
; Line 79
  0003d	28 4a 08	 sub	 BYTE PTR [edx+8], cl
; Line 80
  00040	00 4a 09	 add	 BYTE PTR [edx+9], cl
; Line 81
  00043	00 4a 0b	 add	 BYTE PTR [edx+11], cl
; Line 83
  00046	8b 75 08	 mov	 esi, DWORD PTR _msg$[ebp]
; Line 86
  00049	f7 c1 01 00 00
	00		 test	 ecx, 1
; Line 87
  0004f	74 04		 je	 SHORT $lb_cpy_2$7
; Line 88
  00051	a4		 movsb
; Line 89
  00052	49		 dec	 ecx
; Line 90
  00053	74 14		 je	 SHORT $lb_cpy_end$8
$lb_cpy_2$7:
; Line 93
  00055	f7 c1 02 00 00
	00		 test	 ecx, 2
; Line 94
  0005b	74 07		 je	 SHORT $lb_cpy_4$9
; Line 95
  0005d	66 a5		 movsw
; Line 96
  0005f	83 e9 02	 sub	 ecx, 2
; Line 97
  00062	74 05		 je	 SHORT $lb_cpy_end$8
$lb_cpy_4$9:
; Line 99
  00064	c1 e9 02	 shr	 ecx, 2
; Line 100
  00067	f3 a5		 rep	  movsd
$lb_cpy_end$8:
; Line 105
  00069	0b c0		 or	 eax, eax
; Line 106
  0006b	74 09		 je	 SHORT $lb_true$10
; Line 108
  0006d	8b 12		 mov	 edx, DWORD PTR [edx]
; Line 110
  0006f	8b c8		 mov	 ecx, eax
; Line 111
  00071	89 75 08	 mov	 DWORD PTR _msg$[ebp], esi
; Line 112
  00074	eb ac		 jmp	 SHORT $lb_loop$4
$lb_true$10:
; Line 116
  00076	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
; Line 118
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	eb 02		 jmp	 SHORT $LN1@Push
$lb_false$3:
; Line 121
  00080	33 c0		 xor	 eax, eax
$LN1@Push:
; Line 122
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
?Push@CWriteMemoryHandle@@QAEHPADK@Z ENDP		; CWriteMemoryHandle::Push
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?InitializeMemory@CWriteMemoryHandle@@QAEXXZ
_TEXT	SEGMENT
?InitializeMemory@CWriteMemoryHandle@@QAEXXZ PROC	; CWriteMemoryHandle::InitializeMemory, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.cpp
; Line 18
  00000	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00003	56		 push	 esi
  00004	8b 31		 mov	 esi, DWORD PTR [ecx]
  00006	8b c6		 mov	 eax, esi
  00008	c1 e0 06	 shl	 eax, 6
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000e	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; Line 20
  00011	6b c6 4c	 imul	 eax, esi, 76
; Line 21
  00014	56		 push	 esi
  00015	52		 push	 edx
  00016	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0001d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00020	83 c0 b4	 add	 eax, -76		; ffffffb4H
  00023	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00026	03 c2		 add	 eax, edx
  00028	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0002b	e8 00 00 00 00	 call	 ?InitializeMemoryObjectChain@@YAXPAUMEMORY_OBJECT@@K@Z ; InitializeMemoryObjectChain
  00030	83 c4 08	 add	 esp, 8
  00033	5e		 pop	 esi
; Line 22
  00034	c3		 ret	 0
?InitializeMemory@CWriteMemoryHandle@@QAEXXZ ENDP	; CWriteMemoryHandle::InitializeMemory
_TEXT	ENDS
END
