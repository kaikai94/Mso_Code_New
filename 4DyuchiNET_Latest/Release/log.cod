; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\log.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_pLogManager@@3PAVCLogManager@@A		; g_pLogManager
_BSS	SEGMENT
?g_pLogManager@@3PAVCLogManager@@A DD 01H DUP (?)	; g_pLogManager
_BSS	ENDS
PUBLIC	?Lock@CLogManager@@QAEXXZ			; CLogManager::Lock
PUBLIC	?UnLock@CLogManager@@QAEXXZ			; CLogManager::UnLock
PUBLIC	?Initialize@CLogManager@@QAEHPADK@Z		; CLogManager::Initialize
PUBLIC	?WriteLog@CLogManager@@QAEHPADK@Z		; CLogManager::WriteLog
PUBLIC	?Flush@CLogManager@@QAEHXZ			; CLogManager::Flush
PUBLIC	??0CLogManager@@QAE@XZ				; CLogManager::CLogManager
PUBLIC	??1CLogManager@@QAE@XZ				; CLogManager::~CLogManager
PUBLIC	??_C@_02BKFDOEMK@wt?$AA@			; `string'
PUBLIC	??_C@_02CPIDLAI@at?$AA@				; `string'
PUBLIC	??_C@_0L@OCGDLFMA@?$CF8u?5?3?5?$CFs?5?6?$AA@	; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fopen_s:PROC
EXTRN	_fprintf:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0L@OCGDLFMA@?$CF8u?5?3?5?$CFs?5?6?$AA@
CONST	SEGMENT
??_C@_0L@OCGDLFMA@?$CF8u?5?3?5?$CFs?5?6?$AA@ DB '%8u : %s ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02CPIDLAI@at?$AA@
CONST	SEGMENT
??_C@_02CPIDLAI@at?$AA@ DB 'at', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BKFDOEMK@wt?$AA@
CONST	SEGMENT
??_C@_02BKFDOEMK@wt?$AA@ DB 'wt', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CLogManager@@QAE@XZ
_TEXT	SEGMENT
??1CLogManager@@QAE@XZ PROC				; CLogManager::~CLogManager, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 93
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; Line 94
  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	74 05		 je	 SHORT $LN2@CLogManage
; Line 95
  00009	e8 00 00 00 00	 call	 ?Flush@CLogManager@@QAEHXZ ; CLogManager::Flush
$LN2@CLogManage:
; Line 97
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 0f		 je	 SHORT $LN1@CLogManage
; Line 99
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	83 c4 04	 add	 esp, 4
; Line 100
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN1@CLogManage:
; Line 102
  00023	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00026	50		 push	 eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  0002d	5e		 pop	 esi
; Line 103
  0002e	c3		 ret	 0
??1CLogManager@@QAE@XZ ENDP				; CLogManager::~CLogManager
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CLogManager@@QAE@XZ
_TEXT	SEGMENT
??0CLogManager@@QAE@XZ PROC				; CLogManager::CLogManager, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 7
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; Line 12
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c3		 ret	 0
??0CLogManager@@QAE@XZ ENDP				; CLogManager::CLogManager
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Flush@CLogManager@@QAEHXZ
_TEXT	SEGMENT
_fp$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
?Flush@CLogManager@@QAEHXZ PROC				; CLogManager::Flush, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 63
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File e:\github\mso_code\4dyuchinet_latest\log.h
; Line 20
  0000a	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 69
  00014	8b 1f		 mov	 ebx, DWORD PTR [edi]
; Line 71
  00016	8d 47 2c	 lea	 eax, DWORD PTR [edi+44]
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_02CPIDLAI@at?$AA@
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _fopen
  00024	83 c4 08	 add	 esp, 8
  00027	89 45 f8	 mov	 DWORD PTR _fp$1$[ebp], eax
; Line 72
  0002a	85 c0		 test	 eax, eax
  0002c	75 06		 jne	 SHORT $LN4@Flush
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
; Line 91
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN4@Flush:
; Line 75
  00034	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  0003f	76 2d		 jbe	 SHORT $LN1@Flush
  00041	56		 push	 esi
$LL3@Flush:
; Line 77
  00042	8b 33		 mov	 esi, DWORD PTR [ebx]
; Line 79
  00044	83 c3 04	 add	 ebx, 4
; Line 80
  00047	53		 push	 ebx
  00048	ff 77 10	 push	 DWORD PTR [edi+16]
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OCGDLFMA@?$CF8u?5?3?5?$CFs?5?6?$AA@
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _fprintf
  00056	8b 45 fc	 mov	 eax, DWORD PTR _i$1$[ebp]
  00059	83 c4 10	 add	 esp, 16			; 00000010H
; Line 82
  0005c	ff 47 10	 inc	 DWORD PTR [edi+16]
  0005f	40		 inc	 eax
  00060	03 de		 add	 ebx, esi
  00062	89 45 fc	 mov	 DWORD PTR _i$1$[ebp], eax
  00065	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00068	8b 45 f8	 mov	 eax, DWORD PTR _fp$1$[ebp]
  0006b	72 d5		 jb	 SHORT $LL3@Flush
  0006d	5e		 pop	 esi
$LN1@Flush:
; Line 84
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _fclose
  00074	83 c4 04	 add	 esp, 4
; Line 85
  00077	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; File e:\github\mso_code\4dyuchinet_latest\log.h
; Line 21
  0007e	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 86
  00081	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File e:\github\mso_code\4dyuchinet_latest\log.h
; Line 21
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0008f	5f		 pop	 edi
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 90
  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	5b		 pop	 ebx
; Line 91
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
?Flush@CLogManager@@QAEHXZ ENDP				; CLogManager::Flush
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?WriteLog@CLogManager@@QAEHPADK@Z
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_dwLen$ = 12						; size = 4
?WriteLog@CLogManager@@QAEHPADK@Z PROC			; CLogManager::WriteLog, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 35
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; Line 37
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _dwLen$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fb 00 04 00
	00		 cmp	 ebx, 1024		; 00000400H
  00010	72 08		 jb	 SHORT $LN2@WriteLog
; Line 38
  00012	5f		 pop	 edi
  00013	33 c0		 xor	 eax, eax
  00015	5b		 pop	 ebx
; Line 60
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN2@WriteLog:
; File e:\github\mso_code\4dyuchinet_latest\log.h
; Line 20
  0001a	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 43
  00024	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00027	83 c0 05	 add	 eax, 5
  0002a	03 c3		 add	 eax, ebx
  0002c	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
  0002f	72 07		 jb	 SHORT $LN1@WriteLog
; Line 44
  00031	8b cf		 mov	 ecx, edi
  00033	e8 00 00 00 00	 call	 ?Flush@CLogManager@@QAEHXZ ; CLogManager::Flush
$LN1@WriteLog:
; Line 46
  00038	56		 push	 esi
  00039	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
; Line 48
  0003c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0003f	03 37		 add	 esi, DWORD PTR [edi]
; Line 50
  00041	53		 push	 ebx
  00042	ff 75 08	 push	 DWORD PTR _pMsg$[ebp]
  00045	89 06		 mov	 DWORD PTR [esi], eax
  00047	83 c6 04	 add	 esi, 4
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _memcpy
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 51
  00053	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; Line 53
  00057	ff 47 04	 inc	 DWORD PTR [edi+4]
; Line 55
  0005a	8d 43 05	 lea	 eax, DWORD PTR [ebx+5]
  0005d	01 47 08	 add	 DWORD PTR [edi+8], eax
; File e:\github\mso_code\4dyuchinet_latest\log.h
; Line 21
  00060	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0006a	5e		 pop	 esi
  0006b	5f		 pop	 edi
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 59
  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	5b		 pop	 ebx
; Line 60
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?WriteLog@CLogManager@@QAEHPADK@Z ENDP			; CLogManager::WriteLog
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Initialize@CLogManager@@QAEHPADK@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_fp$ = -4						; size = 4
_szFileName$ = 8					; size = 4
_dwLimitedSize$ = 12					; size = 4
?Initialize@CLogManager@@QAEHPADK@Z PROC		; CLogManager::Initialize, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\log.cpp
; Line 14
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; Line 16
  00006	8b 45 0c	 mov	 eax, DWORD PTR _dwLimitedSize$[ebp]
  00009	53		 push	 ebx
  0000a	83 c0 64	 add	 eax, 100		; 00000064H
  0000d	8b d9		 mov	 ebx, ecx
  0000f	50		 push	 eax
  00010	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	83 c4 04	 add	 esp, 4
  0001b	89 03		 mov	 DWORD PTR [ebx], eax
; Line 17
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN1@Initialize
  00021	5b		 pop	 ebx
; Line 33
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
$LN1@Initialize:
  00028	56		 push	 esi
; Line 20
  00029	8b 75 08	 mov	 esi, DWORD PTR _szFileName$[ebp]
  0002c	57		 push	 edi
  0002d	56		 push	 esi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00034	8b f8		 mov	 edi, eax
; Line 21
  00036	83 c3 2c	 add	 ebx, 44			; 0000002cH
  00039	57		 push	 edi
  0003a	56		 push	 esi
  0003b	53		 push	 ebx
  0003c	e8 00 00 00 00	 call	 _memcpy
; Line 22
  00041	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
; Line 25
  00044	8d 45 fc	 lea	 eax, DWORD PTR _fp$[ebp]
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_02BKFDOEMK@wt?$AA@
  0004c	53		 push	 ebx
  0004d	50		 push	 eax
  0004e	c6 44 37 2c 00	 mov	 BYTE PTR [edi+esi+44], 0
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fp$[ebp], 0
  0005a	e8 00 00 00 00	 call	 _fopen_s
; Line 26
  0005f	ff 75 fc	 push	 DWORD PTR _fp$[ebp]
  00062	e8 00 00 00 00	 call	 _fclose
; Line 28
  00067	8b 45 0c	 mov	 eax, DWORD PTR _dwLimitedSize$[ebp]
  0006a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; Line 30
  00070	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
; Line 32
  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	5b		 pop	 ebx
; Line 33
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?Initialize@CLogManager@@QAEHPADK@Z ENDP		; CLogManager::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?UnLock@CLogManager@@QAEXXZ
_TEXT	SEGMENT
?UnLock@CLogManager@@QAEXXZ PROC			; CLogManager::UnLock, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\log.h
; Line 21
  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0000a	c3		 ret	 0
?UnLock@CLogManager@@QAEXXZ ENDP			; CLogManager::UnLock
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Lock@CLogManager@@QAEXXZ
_TEXT	SEGMENT
?Lock@CLogManager@@QAEXXZ PROC				; CLogManager::Lock, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\log.h
; Line 20
  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0000a	c3		 ret	 0
?Lock@CLogManager@@QAEXXZ ENDP				; CLogManager::Lock
_TEXT	ENDS
END
