; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\connection.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GetReservedBytes@CWriteMemoryHandle@@QAEKXZ	; CWriteMemoryHandle::GetReservedBytes
PUBLIC	?SetNetwork@COverlapped@@QAEXPAVCNetwork@@@Z	; COverlapped::SetNetwork
PUBLIC	?SetMaxTransferSize@COverlapped@@QAEXH@Z	; COverlapped::SetMaxTransferSize
PUBLIC	?GetIOType@COverlapped@@QAE?AW4IO_TYPE@@XZ	; COverlapped::GetIOType
PUBLIC	?GetSocket@COverlapped@@QAEIXZ			; COverlapped::GetSocket
PUBLIC	?SetSocket@COverlapped@@QAEXI@Z			; COverlapped::SetSocket
PUBLIC	??_GCOverlappedRecv@@QAEPAXI@Z			; COverlappedRecv::`scalar deleting destructor'
PUBLIC	?GetReservedBytes@COverlappedSend@@QAEKXZ	; COverlappedSend::GetReservedBytes
PUBLIC	?LockSend@COverlappedSend@@QAEXXZ		; COverlappedSend::LockSend
PUBLIC	?UnLockSend@COverlappedSend@@QAEXXZ		; COverlappedSend::UnLockSend
PUBLIC	?PushMsg@COverlappedSend@@QAEHPADK@Z		; COverlappedSend::PushMsg
PUBLIC	??_GCOverlappedSend@@QAEPAXI@Z			; COverlappedSend::`scalar deleting destructor'
PUBLIC	?CloseSocket@CConnection@@QAEXXZ		; CConnection::CloseSocket
PUBLIC	?Release@CConnection@@QAEXXZ			; CConnection::Release
PUBLIC	?GetAddress@CConnection@@QAEHPADPAG@Z		; CConnection::GetAddress
PUBLIC	?Send@CConnection@@QAEHPADKK@Z			; CConnection::Send
PUBLIC	?Send@CConnection@@QAEHPADK@Z			; CConnection::Send
PUBLIC	?Send@CConnection@@QAEHPAU_WSABUF@@K@Z		; CConnection::Send
PUBLIC	?Send@CConnection@@QAEHPAUPACKET_LIST@@@Z	; CConnection::Send
PUBLIC	?Initialize@CConnection@@QAEHIKHH@Z		; CConnection::Initialize
PUBLIC	??0CConnection@@QAE@XZ				; CConnection::CConnection
PUBLIC	??1CConnection@@QAE@XZ				; CConnection::~CConnection
PUBLIC	??_C@_0BH@IOINKDLM@Send?5Que?5Overflow?5I?3?$CFd?$AA@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__ntohs@4:PROC
EXTRN	__imp__setsockopt@20:PROC
EXTRN	?Push@CWriteMemoryHandle@@QAEHPADK@Z:PROC	; CWriteMemoryHandle::Push
EXTRN	?Initialize@COverlappedRecv@@QAEXXZ:PROC	; COverlappedRecv::Initialize
EXTRN	?AllocBuffer@COverlappedRecv@@QAEHK@Z:PROC	; COverlappedRecv::AllocBuffer
EXTRN	??0COverlappedRecv@@QAE@XZ:PROC			; COverlappedRecv::COverlappedRecv
EXTRN	??1COverlappedRecv@@QAE@XZ:PROC			; COverlappedRecv::~COverlappedRecv
EXTRN	?Initialize@COverlappedSend@@QAEXXZ:PROC	; COverlappedSend::Initialize
EXTRN	?AllocBuffer@COverlappedSend@@QAEHK@Z:PROC	; COverlappedSend::AllocBuffer
EXTRN	?SendBuffer@COverlappedSend@@QAEHXZ:PROC	; COverlappedSend::SendBuffer
EXTRN	??0COverlappedSend@@QAE@XZ:PROC			; COverlappedSend::COverlappedSend
EXTRN	??1COverlappedSend@@QAE@XZ:PROC			; COverlappedSend::~COverlappedSend
EXTRN	?WriteLog@CLogManager@@QAEHPADK@Z:PROC		; CLogManager::WriteLog
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	?g_pICode@@3PAUICode@@A:DWORD			; g_pICode
EXTRN	?g_pLogManager@@3PAVCLogManager@@A:DWORD	; g_pLogManager
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BH@IOINKDLM@Send?5Que?5Overflow?5I?3?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@IOINKDLM@Send?5Que?5Overflow?5I?3?$CFd?$AA@ DB 'Send Que Overfl'
	DB	'ow I:%d', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Initialize@CConnection@@QAEHIKHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$1
__ehfuncinfo$?Initialize@CConnection@@QAEHIKHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Initialize@CConnection@@QAEHIKHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CConnection@@QAE@XZ
_TEXT	SEGMENT
??1CConnection@@QAE@XZ PROC				; CConnection::~CConnection, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 241
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
; Line 280
  00004	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00007	85 ff		 test	 edi, edi
  00009	74 17		 je	 SHORT $LN4@CConnectio
  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 ??1COverlappedRecv@@QAE@XZ ; COverlappedRecv::~COverlappedRecv
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
; Line 283
  0001b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN4@CConnectio:
; Line 285
  00022	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00025	85 ff		 test	 edi, edi
  00027	74 17		 je	 SHORT $LN3@CConnectio
  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ??1COverlappedSend@@QAE@XZ ; COverlappedSend::~COverlappedSend
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
; Line 288
  00039	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN3@CConnectio:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
; Line 244
  00042	c3		 ret	 0
??1CConnection@@QAE@XZ ENDP				; CConnection::~CConnection
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CConnection@@QAE@XZ
_TEXT	SEGMENT
??0CConnection@@QAE@XZ PROC				; CConnection::CConnection, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 8
  00000	0f 57 c0	 xorps	 xmm0, xmm0
; Line 9
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; Line 10
  00009	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; Line 19
  00010	8b c1		 mov	 eax, ecx
  00012	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00019	f3 0f 7f 41 0c	 movdqu	 XMMWORD PTR [ecx+12], xmm0
  0001e	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00025	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  0002c	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00033	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  0003a	c3		 ret	 0
??0CConnection@@QAE@XZ ENDP				; CConnection::CConnection
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Initialize@CConnection@@QAEHIKHH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
$T3 = -20						; size = 4
_bSwitch$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_size$ = 12						; size = 4
_max_recv_size$ = 16					; size = 4
_max_send_size$ = 20					; size = 4
?Initialize@CConnection@@QAEHIKHH@Z PROC		; CConnection::Initialize, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 22
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Initialize@CConnection@@QAEHIKHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
; Line 29
  00028	6a 04		 push	 4
  0002a	8d 45 f0	 lea	 eax, DWORD PTR _bSwitch$[ebp]
  0002d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00033	50		 push	 eax
  00034	6a 01		 push	 1
  00036	6a 06		 push	 6
  00038	ff 75 08	 push	 DWORD PTR _s$[ebp]
  0003b	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  00042	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bSwitch$[ebp], 1
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20
  0004f	0f 57 c0	 xorps	 xmm0, xmm0
; Line 34
  00052	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; Line 35
  00059	f3 0f 7f 47 0c	 movdqu	 XMMWORD PTR [edi+12], xmm0
; Line 38
  0005e	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00061	85 c9		 test	 ecx, ecx
  00063	75 39		 jne	 SHORT $LN4@Initialize
; Line 39
  00065	6a 58		 push	 88			; 00000058H
  00067	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006c	83 c4 04	 add	 esp, 4
  0006f	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00079	85 c0		 test	 eax, eax
  0007b	74 13		 je	 SHORT $LN7@Initialize
  0007d	8b c8		 mov	 ecx, eax
  0007f	e8 00 00 00 00	 call	 ??0COverlappedRecv@@QAE@XZ ; COverlappedRecv::COverlappedRecv
  00084	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008b	89 47 20	 mov	 DWORD PTR [edi+32], eax
; Line 40
  0008e	eb 13		 jmp	 SHORT $LN3@Initialize
$LN7@Initialize:
; Line 39
  00090	33 c0		 xor	 eax, eax
  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	89 47 20	 mov	 DWORD PTR [edi+32], eax
; Line 40
  0009c	eb 05		 jmp	 SHORT $LN3@Initialize
$LN4@Initialize:
; Line 41
  0009e	e8 00 00 00 00	 call	 ?Initialize@COverlappedRecv@@QAEXXZ ; COverlappedRecv::Initialize
$LN3@Initialize:
; Line 43
  000a3	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000a6	85 c9		 test	 ecx, ecx
  000a8	75 39		 jne	 SHORT $LN2@Initialize
; Line 44
  000aa	6a 68		 push	 104			; 00000068H
  000ac	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b1	83 c4 04	 add	 esp, 4
  000b4	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  000b7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000be	85 c0		 test	 eax, eax
  000c0	74 13		 je	 SHORT $LN9@Initialize
  000c2	8b c8		 mov	 ecx, eax
  000c4	e8 00 00 00 00	 call	 ??0COverlappedSend@@QAE@XZ ; COverlappedSend::COverlappedSend
  000c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d0	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; Line 45
  000d3	eb 13		 jmp	 SHORT $LN1@Initialize
$LN9@Initialize:
; Line 44
  000d5	33 c0		 xor	 eax, eax
  000d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000de	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; Line 45
  000e1	eb 05		 jmp	 SHORT $LN1@Initialize
$LN2@Initialize:
; Line 46
  000e3	e8 00 00 00 00	 call	 ?Initialize@COverlappedSend@@QAEXXZ ; COverlappedSend::Initialize
$LN1@Initialize:
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 70
  000e8	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  000eb	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 52
  000ee	ff 75 0c	 push	 DWORD PTR _size$[ebp]
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 70
  000f1	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  000f4	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000f7	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000fa	89 41 24	 mov	 DWORD PTR [ecx+36], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 52
  000fd	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00100	e8 00 00 00 00	 call	 ?AllocBuffer@COverlappedRecv@@QAEHK@Z ; COverlappedRecv::AllocBuffer
; Line 53
  00105	ff 75 0c	 push	 DWORD PTR _size$[ebp]
  00108	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0010b	e8 00 00 00 00	 call	 ?AllocBuffer@COverlappedSend@@QAEHK@Z ; COverlappedSend::AllocBuffer
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 71
  00110	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00113	8b 45 10	 mov	 eax, DWORD PTR _max_recv_size$[ebp]
  00116	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00119	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0011c	8b 45 14	 mov	 eax, DWORD PTR _max_send_size$[ebp]
  0011f	89 41 20	 mov	 DWORD PTR [ecx+32], eax
; Line 78
  00122	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00125	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00128	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0012b	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0012e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 73
  00131	b8 01 00 00 00	 mov	 eax, 1
; Line 75
  00136	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00139	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00140	59		 pop	 ecx
  00141	5f		 pop	 edi
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$1:
  0000b	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
__ehhandler$?Initialize@CConnection@@QAEHIKHH@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@CConnection@@QAEHIKHH@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@CConnection@@QAEHIKHH@Z ENDP		; CConnection::Initialize
; Function compile flags: /Ogtp
;	COMDAT ?Send@CConnection@@QAEHPAUPACKET_LIST@@@Z
_TEXT	SEGMENT
_dwSize$ = -40						; size = 4
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_pList$ = 8						; size = 4
?Send@CConnection@@QAEHPAUPACKET_LIST@@@Z PROC		; CConnection::Send, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 195
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _pList$[ebp]
; Line 199
  00015	33 d2		 xor	 edx, edx
  00017	89 55 d8	 mov	 DWORD PTR _dwSize$[ebp], edx
  0001a	bb 01 00 00 00	 mov	 ebx, 1
; Line 200
  0001f	8b c6		 mov	 eax, esi
  00021	57		 push	 edi
  00022	8b f9		 mov	 edi, ecx
; Line 202
  00024	85 f6		 test	 esi, esi
  00026	74 15		 je	 SHORT $LN8@Send
  00028	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL9@Send:
; Line 204
  00030	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00033	89 55 d8	 mov	 DWORD PTR _dwSize$[ebp], edx
; Line 205
  00036	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00039	85 c0		 test	 eax, eax
  0003b	75 f3		 jne	 SHORT $LL9@Send
$LN8@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  0003d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00040	83 c0 50	 add	 eax, 80			; 00000050H
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  0004a	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 210
  0004d	8b 45 d8	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00050	83 c0 02	 add	 eax, 2
  00053	39 41 34	 cmp	 DWORD PTR [ecx+52], eax
  00056	77 3b		 ja	 SHORT $LN7@Send
; Line 212
  00058	33 db		 xor	 ebx, ebx
; Line 213
  0005a	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, ebx ; g_pLogManager
  00060	74 68		 je	 SHORT $seg_return$35
; Line 215
  00062	ff 77 08	 push	 DWORD PTR [edi+8]
  00065	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IOINKDLM@Send?5Que?5Overflow?5I?3?$CFd?$AA@
  0006d	50		 push	 eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 216
  00077	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  00087	50		 push	 eax
  00088	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
; Line 218
  00091	eb 37		 jmp	 SHORT $seg_return$35
$LN7@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  00093	6a 02		 push	 2
  00095	8d 45 d8	 lea	 eax, DWORD PTR _dwSize$[ebp]
  00098	83 c1 30	 add	 ecx, 48			; 00000030H
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 223
  000a1	85 f6		 test	 esi, esi
  000a3	74 17		 je	 SHORT $LN3@Send
$LL4@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000a5	ff 76 04	 push	 DWORD PTR [esi+4]
  000a8	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000ab	ff 36		 push	 DWORD PTR [esi]
  000ad	83 c1 30	 add	 ecx, 48			; 00000030H
  000b0	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 226
  000b5	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  000b8	85 f6		 test	 esi, esi
  000ba	75 e9		 jne	 SHORT $LL4@Send
$LN3@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  000bc	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 229
  000bf	80 79 14 03	 cmp	 BYTE PTR [ecx+20], 3
  000c3	75 05		 jne	 SHORT $seg_return$35
; Line 232
  000c5	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$35:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  000ca	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000cd	83 c1 50	 add	 ecx, 80			; 00000050H
  000d0	51		 push	 ecx
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 239
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	8b c3		 mov	 eax, ebx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	33 cd		 xor	 ecx, ebp
  000e0	5b		 pop	 ebx
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 04 00	 ret	 4
?Send@CConnection@@QAEHPAUPACKET_LIST@@@Z ENDP		; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Send@CConnection@@QAEHPAU_WSABUF@@K@Z
_TEXT	SEGMENT
_result$1$ = -48					; size = 4
_this$GSCopy$1$ = -44					; size = 4
_dwSize$ = -40						; size = 4
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_pBuf$ = 8						; size = 4
_dwNum$ = 12						; size = 4
?Send@CConnection@@QAEHPAU_WSABUF@@K@Z PROC		; CConnection::Send, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 156
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
; Line 161
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _dwNum$[ebp]
  00014	33 d2		 xor	 edx, edx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _pBuf$[ebp]
  0001a	33 c0		 xor	 eax, eax
  0001c	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _result$1$[ebp], 1
  00023	89 55 d8	 mov	 DWORD PTR _dwSize$[ebp], edx
  00026	57		 push	 edi
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  0002c	85 db		 test	 ebx, ebx
  0002e	74 0b		 je	 SHORT $LN9@Send
$LL32@Send:
; Line 162
  00030	03 14 c6	 add	 edx, DWORD PTR [esi+eax*8]
  00033	40		 inc	 eax
  00034	3b c3		 cmp	 eax, ebx
  00036	72 f8		 jb	 SHORT $LL32@Send
  00038	89 55 d8	 mov	 DWORD PTR _dwSize$[ebp], edx
$LN9@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  0003b	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0003e	83 c0 50	 add	 eax, 80			; 00000050H
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  00048	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 166
  0004b	8b 45 d8	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0004e	83 c0 02	 add	 eax, 2
  00051	39 41 34	 cmp	 DWORD PTR [ecx+52], eax
  00054	77 41		 ja	 SHORT $LN8@Send
; Line 169
  00056	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, 0 ; g_pLogManager
  0005d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _result$1$[ebp], 0
  00064	74 75		 je	 SHORT $seg_return$39
; Line 171
  00066	ff 77 08	 push	 DWORD PTR [edi+8]
  00069	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IOINKDLM@Send?5Que?5Overflow?5I?3?$CFd?$AA@
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 172
  0007b	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0007e	50		 push	 eax
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  0008b	50		 push	 eax
  0008c	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
; Line 174
  00095	eb 44		 jmp	 SHORT $seg_return$39
$LN8@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  00097	6a 02		 push	 2
  00099	8d 45 d8	 lea	 eax, DWORD PTR _dwSize$[ebp]
  0009c	83 c1 30	 add	 ecx, 48			; 00000030H
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 178
  000a5	33 ff		 xor	 edi, edi
  000a7	85 db		 test	 ebx, ebx
  000a9	74 1f		 je	 SHORT $LN3@Send
  000ab	eb 03 8d 49 00	 npad	 5
$LL5@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000b0	8b 45 d4	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000b3	ff 34 fe	 push	 DWORD PTR [esi+edi*8]
  000b6	ff 74 fe 04	 push	 DWORD PTR [esi+edi*8+4]
  000ba	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000bd	83 c1 30	 add	 ecx, 48			; 00000030H
  000c0	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 178
  000c5	47		 inc	 edi
  000c6	3b fb		 cmp	 edi, ebx
  000c8	72 e6		 jb	 SHORT $LL5@Send
$LN3@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  000ca	8b 7d d4	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  000cd	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 183
  000d0	80 79 14 03	 cmp	 BYTE PTR [ecx+20], 3
  000d4	75 05		 jne	 SHORT $seg_return$39
; Line 186
  000d6	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$39:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  000db	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000de	83 c1 50	 add	 ecx, 80			; 00000050H
  000e1	51		 push	 ecx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 193
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000eb	8b 45 d0	 mov	 eax, DWORD PTR _result$1$[ebp]
  000ee	33 cd		 xor	 ecx, ebp
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
?Send@CConnection@@QAEHPAU_WSABUF@@K@Z ENDP		; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Send@CConnection@@QAEHPADK@Z
_TEXT	SEGMENT
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
_length$ = 12						; size = 4
?Send@CConnection@@QAEHPADK@Z PROC			; CConnection::Send, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 124
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	57		 push	 edi
; Line 127
  00018	bf 01 00 00 00	 mov	 edi, 1
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  0001d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00020	83 c0 50	 add	 eax, 80			; 00000050H
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  0002a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 131
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  00030	83 c0 02	 add	 eax, 2
  00033	39 41 34	 cmp	 DWORD PTR [ecx+52], eax
  00036	77 3b		 ja	 SHORT $LN5@Send
; Line 133
  00038	33 ff		 xor	 edi, edi
; Line 134
  0003a	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, edi ; g_pLogManager
  00040	74 5c		 je	 SHORT $seg_return$23
; Line 136
  00042	ff 76 08	 push	 DWORD PTR [esi+8]
  00045	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IOINKDLM@Send?5Que?5Overflow?5I?3?$CFd?$AA@
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 137
  00057	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  00067	50		 push	 eax
  00068	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
; Line 139
  00071	eb 2b		 jmp	 SHORT $seg_return$23
$LN5@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  00073	6a 02		 push	 2
  00075	8d 45 0c	 lea	 eax, DWORD PTR _length$[ebp]
  00078	83 c1 30	 add	 ecx, 48			; 00000030H
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
  00081	ff 75 0c	 push	 DWORD PTR _length$[ebp]
  00084	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00087	53		 push	 ebx
  00088	83 c1 30	 add	 ecx, 48			; 00000030H
  0008b	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  00090	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 145
  00093	80 79 14 03	 cmp	 BYTE PTR [ecx+20], 3
  00097	75 05		 jne	 SHORT $seg_return$23
; Line 148
  00099	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$23:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  0009e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000a1	83 c1 50	 add	 ecx, 80			; 00000050H
  000a4	51		 push	 ecx
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 154
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	8b c7		 mov	 eax, edi
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	33 cd		 xor	 ecx, ebp
  000b4	5b		 pop	 ebx
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 08 00	 ret	 8
?Send@CConnection@@QAEHPADK@Z ENDP			; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Send@CConnection@@QAEHPADKK@Z
_TEXT	SEGMENT
_msg$GSCopy$1$ = -52					; size = 4
_total_len$ = -48					; size = 4
_checkbytes$ = -44					; size = 4
_checkbytes_len$ = -40					; size = 4
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
_length$ = 12						; size = 4
_flag$ = 16						; size = 4
?Send@CConnection@@QAEHPADKK@Z PROC			; CConnection::Send, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 80
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 87
  00010	83 7d 10 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00014	8b 55 08	 mov	 edx, DWORD PTR _msg$[ebp]
  00017	53		 push	 ebx
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _length$[ebp]
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	bf 01 00 00 00	 mov	 edi, 1
  00022	89 55 cc	 mov	 DWORD PTR _msg$GSCopy$1$[ebp], edx
  00025	8b c7		 mov	 eax, edi
  00027	8b f1		 mov	 esi, ecx
  00029	89 45 d8	 mov	 DWORD PTR _checkbytes_len$[ebp], eax
  0002c	75 09		 jne	 SHORT $LN7@Send
; Line 88
  0002e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _checkbytes$[ebp], 0
; Line 89
  00035	eb 18		 jmp	 SHORT $LN6@Send
$LN7@Send:
; Line 90
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pICode@@3PAUICode@@A ; g_pICode
  0003c	53		 push	 ebx
  0003d	52		 push	 edx
  0003e	8d 55 d8	 lea	 edx, DWORD PTR _checkbytes_len$[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	52		 push	 edx
  00044	8d 55 d4	 lea	 edx, DWORD PTR _checkbytes$[ebp]
  00047	52		 push	 edx
  00048	50		 push	 eax
  00049	ff 51 0c	 call	 DWORD PTR [ecx+12]
  0004c	8b 45 d8	 mov	 eax, DWORD PTR _checkbytes_len$[ebp]
$LN6@Send:
; Line 92
  0004f	03 c3		 add	 eax, ebx
  00051	89 45 d0	 mov	 DWORD PTR _total_len$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  00054	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00057	83 c0 50	 add	 eax, 80			; 00000050H
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  00061	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 96
  00064	8b 45 d0	 mov	 eax, DWORD PTR _total_len$[ebp]
  00067	83 c0 02	 add	 eax, 2
  0006a	39 41 34	 cmp	 DWORD PTR [ecx+52], eax
  0006d	77 3b		 ja	 SHORT $LN5@Send
; Line 98
  0006f	33 ff		 xor	 edi, edi
; Line 99
  00071	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, edi ; g_pLogManager
  00077	74 6e		 je	 SHORT $seg_return$27
; Line 101
  00079	ff 76 08	 push	 DWORD PTR [esi+8]
  0007c	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IOINKDLM@Send?5Que?5Overflow?5I?3?$CFd?$AA@
  00084	50		 push	 eax
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 102
  0008e	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00091	50		 push	 eax
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  0009e	50		 push	 eax
  0009f	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
; Line 104
  000a8	eb 3d		 jmp	 SHORT $seg_return$27
$LN5@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000aa	6a 02		 push	 2
  000ac	8d 45 d0	 lea	 eax, DWORD PTR _total_len$[ebp]
  000af	83 c1 30	 add	 ecx, 48			; 00000030H
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
  000b8	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000bb	53		 push	 ebx
  000bc	ff 75 cc	 push	 DWORD PTR _msg$GSCopy$1$[ebp]
  000bf	83 c1 30	 add	 ecx, 48			; 00000030H
  000c2	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
  000c7	ff 75 d8	 push	 DWORD PTR _checkbytes_len$[ebp]
  000ca	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000cd	8d 45 d4	 lea	 eax, DWORD PTR _checkbytes$[ebp]
  000d0	50		 push	 eax
  000d1	83 c1 30	 add	 ecx, 48			; 00000030H
  000d4	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  000d9	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 111
  000dc	80 79 14 03	 cmp	 BYTE PTR [ecx+20], 3
  000e0	75 05		 jne	 SHORT $seg_return$27
; Line 114
  000e2	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$27:
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  000e7	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000ea	83 c1 50	 add	 ecx, 80			; 00000050H
  000ed	51		 push	 ecx
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 121
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	8b c7		 mov	 eax, edi
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	33 cd		 xor	 ecx, ebp
  000fd	5b		 pop	 ebx
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 0c 00	 ret	 12			; 0000000cH
?Send@CConnection@@QAEHPADKK@Z ENDP			; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetAddress@CConnection@@QAEHPADPAG@Z
_TEXT	SEGMENT
_pIP$ = 8						; size = 4
_pwport$ = 12						; size = 4
?GetAddress@CConnection@@QAEHPADPAG@Z PROC		; CConnection::GetAddress, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 261
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 263
  00003	8b 45 0c	 mov	 eax, DWORD PTR _pwport$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; Line 264
  0000b	8b 75 08	 mov	 esi, DWORD PTR _pIP$[ebp]
  0000e	8b d9		 mov	 ebx, ecx
  00010	33 c9		 xor	 ecx, ecx
  00012	66 89 08	 mov	 WORD PTR [eax], cx
  00015	57		 push	 edi
  00016	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0001a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0001d	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  00021	88 4e 0e	 mov	 BYTE PTR [esi+14], cl
; Line 266
  00024	ff 73 10	 push	 DWORD PTR [ebx+16]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  0002d	8b f8		 mov	 edi, eax
; Line 267
  0002f	85 ff		 test	 edi, edi
  00031	74 30		 je	 SHORT $LN5@GetAddress
; Line 270
  00033	57		 push	 edi
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0003a	40		 inc	 eax
  0003b	50		 push	 eax
  0003c	57		 push	 edi
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _memcpy
; Line 271
  00043	0f b7 43 0e	 movzx	 eax, WORD PTR [ebx+14]
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohs@4
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _pwport$[ebp]
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	66 89 01	 mov	 WORD PTR [ecx], ax
; Line 275
  0005a	b8 01 00 00 00	 mov	 eax, 1
; Line 277
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN5@GetAddress:
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
; Line 275
  00065	33 c0		 xor	 eax, eax
$lb_return$7:
  00067	5b		 pop	 ebx
; Line 277
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?GetAddress@CConnection@@QAEHPADPAG@Z ENDP		; CConnection::GetAddress
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Release@CConnection@@QAEXXZ
_TEXT	SEGMENT
?Release@CConnection@@QAEXXZ PROC			; CConnection::Release, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 279
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
; Line 280
  00004	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00007	85 ff		 test	 edi, edi
  00009	74 17		 je	 SHORT $LN2@Release
; Line 283
  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 ??1COverlappedRecv@@QAE@XZ ; COverlappedRecv::~COverlappedRecv
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
  0001b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN2@Release:
; Line 285
  00022	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00025	85 ff		 test	 edi, edi
  00027	74 17		 je	 SHORT $LN1@Release
; Line 288
  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ??1COverlappedSend@@QAE@XZ ; COverlappedSend::~COverlappedSend
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
  00039	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN1@Release:
; Line 290
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	c3		 ret	 0
?Release@CConnection@@QAEXXZ ENDP			; CConnection::Release
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?CloseSocket@CConnection@@QAEXXZ
_TEXT	SEGMENT
?CloseSocket@CConnection@@QAEXXZ PROC			; CConnection::CloseSocket, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 247
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; Line 251
  00003	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00006	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00009	83 f9 ff	 cmp	 ecx, -1
  0000c	74 24		 je	 SHORT $LN12@CloseSocke
  0000e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00011	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  00015	74 1b		 je	 SHORT $LN12@CloseSocke
; Line 253
  00017	51		 push	 ecx
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 78
  0001e	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00021	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
  00028	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0002b	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1
$LN12@CloseSocke:
  00032	5e		 pop	 esi
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 259
  00033	c3		 ret	 0
?CloseSocket@CConnection@@QAEXXZ ENDP			; CConnection::CloseSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCOverlappedSend@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCOverlappedSend@@QAEPAXI@Z PROC			; COverlappedSend::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1COverlappedSend@@QAE@XZ ; COverlappedSend::~COverlappedSend
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCOverlappedSend@@QAEPAXI@Z ENDP			; COverlappedSend::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?PushMsg@COverlappedSend@@QAEHPADK@Z
_TEXT	SEGMENT
_msg$ = 8						; size = 4
_dwLength$ = 12						; size = 4
?PushMsg@COverlappedSend@@QAEHPADK@Z PROC		; COverlappedSend::PushMsg, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 c1 30	 add	 ecx, 48			; 00000030H
  00006	5d		 pop	 ebp
  00007	e9 00 00 00 00	 jmp	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
?PushMsg@COverlappedSend@@QAEHPADK@Z ENDP		; COverlappedSend::PushMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?UnLockSend@COverlappedSend@@QAEXXZ
_TEXT	SEGMENT
?UnLockSend@COverlappedSend@@QAEXXZ PROC		; COverlappedSend::UnLockSend, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  00000	8d 41 50	 lea	 eax, DWORD PTR [ecx+80]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0000a	c3		 ret	 0
?UnLockSend@COverlappedSend@@QAEXXZ ENDP		; COverlappedSend::UnLockSend
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?LockSend@COverlappedSend@@QAEXXZ
_TEXT	SEGMENT
?LockSend@COverlappedSend@@QAEXXZ PROC			; COverlappedSend::LockSend, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  00000	8d 41 50	 lea	 eax, DWORD PTR [ecx+80]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0000a	c3		 ret	 0
?LockSend@COverlappedSend@@QAEXXZ ENDP			; COverlappedSend::LockSend
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetReservedBytes@COverlappedSend@@QAEKXZ
_TEXT	SEGMENT
?GetReservedBytes@COverlappedSend@@QAEKXZ PROC		; COverlappedSend::GetReservedBytes, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 13
  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	c3		 ret	 0
?GetReservedBytes@COverlappedSend@@QAEKXZ ENDP		; COverlappedSend::GetReservedBytes
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCOverlappedRecv@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCOverlappedRecv@@QAEPAXI@Z PROC			; COverlappedRecv::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1COverlappedRecv@@QAE@XZ ; COverlappedRecv::~COverlappedRecv
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCOverlappedRecv@@QAEPAXI@Z ENDP			; COverlappedRecv::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?SetSocket@COverlapped@@QAEXI@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?SetSocket@COverlapped@@QAEXI@Z PROC			; COverlapped::SetSocket, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 78
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSocket@COverlapped@@QAEXI@Z ENDP			; COverlapped::SetSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetSocket@COverlapped@@QAEIXZ
_TEXT	SEGMENT
?GetSocket@COverlapped@@QAEIXZ PROC			; COverlapped::GetSocket, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 77
  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetSocket@COverlapped@@QAEIXZ ENDP			; COverlapped::GetSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetIOType@COverlapped@@QAE?AW4IO_TYPE@@XZ
_TEXT	SEGMENT
?GetIOType@COverlapped@@QAE?AW4IO_TYPE@@XZ PROC		; COverlapped::GetIOType, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  00000	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  00004	c3		 ret	 0
?GetIOType@COverlapped@@QAE?AW4IO_TYPE@@XZ ENDP		; COverlapped::GetIOType
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?SetMaxTransferSize@COverlapped@@QAEXH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?SetMaxTransferSize@COverlapped@@QAEXH@Z PROC		; COverlapped::SetMaxTransferSize, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 71
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00006	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMaxTransferSize@COverlapped@@QAEXH@Z ENDP		; COverlapped::SetMaxTransferSize
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?SetNetwork@COverlapped@@QAEXPAVCNetwork@@@Z
_TEXT	SEGMENT
_pNet$ = 8						; size = 4
?SetNetwork@COverlapped@@QAEXPAVCNetwork@@@Z PROC	; COverlapped::SetNetwork, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 70
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pNet$[ebp]
  00006	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetNetwork@COverlapped@@QAEXPAVCNetwork@@@Z ENDP	; COverlapped::SetNetwork
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetReservedBytes@CWriteMemoryHandle@@QAEKXZ
_TEXT	SEGMENT
?GetReservedBytes@CWriteMemoryHandle@@QAEKXZ PROC	; CWriteMemoryHandle::GetReservedBytes, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetReservedBytes@CWriteMemoryHandle@@QAEKXZ ENDP	; CWriteMemoryHandle::GetReservedBytes
_TEXT	ENDS
END
