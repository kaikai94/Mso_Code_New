; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\switch_que.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_hSwitchQueueThread@@3PAXA			; g_hSwitchQueueThread
PUBLIC	?g_hSwitchHandle@@3PAXA				; g_hSwitchHandle
PUBLIC	?g_dwSwitchQueCSNum@@3KA			; g_dwSwitchQueCSNum
PUBLIC	?g_dwSwitchEnable@@3KA				; g_dwSwitchEnable
PUBLIC	?g_hEventMustSwitch@@3PAPAXA			; g_hEventMustSwitch
PUBLIC	?g_hProcessComplete@@3PAXA			; g_hProcessComplete
PUBLIC	?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A	; g_csSwitchQue
_BSS	SEGMENT
?g_hSwitchQueueThread@@3PAXA DD 01H DUP (?)		; g_hSwitchQueueThread
?g_hSwitchHandle@@3PAXA DD 01H DUP (?)			; g_hSwitchHandle
?g_dwSwitchQueCSNum@@3KA DD 01H DUP (?)			; g_dwSwitchQueCSNum
?g_dwSwitchEnable@@3KA DD 01H DUP (?)			; g_dwSwitchEnable
?g_hEventMustSwitch@@3PAPAXA DD 02H DUP (?)		; g_hEventMustSwitch
?g_hProcessComplete@@3PAXA DD 01H DUP (?)		; g_hProcessComplete
?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A DB 0600H DUP (?) ; g_csSwitchQue
_BSS	ENDS
PUBLIC	?StartSwitchQueThread@@YAHPAXK@Z		; StartSwitchQueThread
PUBLIC	?EndSwitchQueThread@@YAXXZ			; EndSwitchQueThread
PUBLIC	?SwitchQueThread@@YGIPAX@Z			; SwitchQueThread
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	??_C@_0BM@MHJJHHCF@Fail?5to?5Create?5SwitchThread?$AA@ ; `string'
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__beginthreadex:PROC
EXTRN	__endthreadex:PROC
EXTRN	?g_pQueManager@@3PAVCQueManager@@A:DWORD	; g_pQueManager
;	COMDAT ??_C@_0BM@MHJJHHCF@Fail?5to?5Create?5SwitchThread?$AA@
CONST	SEGMENT
??_C@_0BM@MHJJHHCF@Fail?5to?5Create?5SwitchThread?$AA@ DB 'Fail to Create'
	DB	' SwitchThread', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?SwitchQueThread@@YGIPAX@Z
_TEXT	SEGMENT
_dwMsgNum$ = -16					; size = 4
_pEvent$ = -12						; size = 4
_count$ = -8						; size = 4
_pcsSwitchQue$ = -4					; size = 4
_lpVoid$ = 8						; size = 4
?SwitchQueThread@@YGIPAX@Z PROC				; SwitchQueThread, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\switch_que.cpp
; Line 72
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; Line 82
  00007	ba 00 00 00 00	 mov	 edx, OFFSET ?g_hEventMustSwitch@@3PAPAXA
; Line 83
  0000c	89 55 f4	 mov	 DWORD PTR _pEvent$[ebp], edx
$lb_loop$4:
; Line 86
  0000f	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
; Line 87
  00012	6a ff		 push	 -1
; Line 88
  00014	6a 00		 push	 0
; Line 89
  00016	52		 push	 edx
; Line 90
  00017	6a 02		 push	 2
; Line 91
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForMultipleObjects@16
; Line 93
  0001f	0b c0		 or	 eax, eax
; Line 94
  00021	0f 85 88 00 00
	00		 jne	 $lb_return$5
; Line 97
  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A
; Line 98
  0002c	89 45 fc	 mov	 DWORD PTR _pcsSwitchQue$[ebp], eax
; Line 100
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
; Line 101
  00035	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$lb_enter_count$6:
; Line 104
  00038	8b 55 fc	 mov	 edx, DWORD PTR _pcsSwitchQue$[ebp]
; Line 105
  0003b	52		 push	 edx
; Line 106
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 108
  00042	83 45 fc 18	 add	 DWORD PTR _pcsSwitchQue$[ebp], 24 ; 00000018H
; Line 109
  00046	ff 4d f8	 dec	 DWORD PTR _count$[ebp]
; Line 110
  00049	75 ed		 jne	 SHORT $lb_enter_count$6
; Line 114
  0004b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?g_pQueManager@@3PAVCQueManager@@A ; g_pQueManager
; Line 115
  00051	8b 03		 mov	 eax, DWORD PTR [ebx]
; Line 116
  00053	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; Line 117
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
; Line 118
  00058	89 4d f0	 mov	 DWORD PTR _dwMsgNum$[ebp], ecx
; Line 119
  0005b	0b c9		 or	 ecx, ecx
; Line 120
  0005d	74 05		 je	 SHORT $lb_leave$7
; Line 122
  0005f	89 13		 mov	 DWORD PTR [ebx], edx
; Line 123
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$lb_leave$7:
; Line 127
  00064	83 6d fc 18	 sub	 DWORD PTR _pcsSwitchQue$[ebp], 24 ; 00000018H
; Line 128
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
; Line 129
  0006e	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$lb_leave_count$8:
; Line 132
  00071	8b 55 fc	 mov	 edx, DWORD PTR _pcsSwitchQue$[ebp]
; Line 133
  00074	52		 push	 edx
; Line 134
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 136
  0007b	83 6d fc 18	 sub	 DWORD PTR _pcsSwitchQue$[ebp], 24 ; 00000018H
; Line 137
  0007f	ff 4d f8	 dec	 DWORD PTR _count$[ebp]
; Line 138
  00082	75 ed		 jne	 SHORT $lb_leave_count$8
; Line 140
  00084	33 c0		 xor	 eax, eax
; Line 141
  00086	0b 45 f0	 or	 eax, DWORD PTR _dwMsgNum$[ebp]
; Line 142
  00089	74 84		 je	 SHORT $lb_loop$4
; Line 145
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hSwitchHandle@@3PAXA ; g_hSwitchHandle
; Line 146
  00091	51		 push	 ecx
; Line 147
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 150
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_hProcessComplete@@3PAXA ; g_hProcessComplete
; Line 151
  0009e	6a ff		 push	 -1
; Line 152
  000a0	52		 push	 edx
; Line 153
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 154
  000a7	0b c0		 or	 eax, eax
; Line 155
  000a9	0f 84 60 ff ff
	ff		 je	 $lb_loop$4
$lb_return$5:
; Line 158
  000af	6a 00		 push	 0
  000b1	e8 00 00 00 00	 call	 __endthreadex
  000b6	83 c4 04	 add	 esp, 4
; Line 159
  000b9	33 c0		 xor	 eax, eax
; Line 160
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
?SwitchQueThread@@YGIPAX@Z ENDP				; SwitchQueThread
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?EndSwitchQueThread@@YAXXZ
_TEXT	SEGMENT
?EndSwitchQueThread@@YAXXZ PROC				; EndSwitchQueThread, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\switch_que.cpp
; Line 54
  00000	56		 push	 esi
  00001	57		 push	 edi
; Line 55
  00002	ff 35 04 00 00
	00		 push	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA+4
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 57
  0000e	6a ff		 push	 -1
  00010	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA ; g_hSwitchQueueThread
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 59
  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA
  00022	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  00028	ff d6		 call	 esi
; Line 60
  0002a	ff 35 04 00 00
	00		 push	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA+4
  00030	ff d6		 call	 esi
; Line 61
  00032	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hProcessComplete@@3PAXA ; g_hProcessComplete
  00038	ff d6		 call	 esi
; Line 62
  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA ; g_hSwitchQueueThread
  00040	ff d6		 call	 esi
; Line 65
  00042	33 ff		 xor	 edi, edi
  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA, 0 ; g_hSwitchQueueThread
  0004e	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?g_dwSwitchQueCSNum@@3KA, edi ; g_dwSwitchQueCSNum
  00054	76 1c		 jbe	 SHORT $LN1@EndSwitchQ
; Line 55
  00056	53		 push	 ebx
  00057	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__DeleteCriticalSection@4
  0005d	be 00 00 00 00	 mov	 esi, OFFSET ?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A ; g_csSwitchQue
$LL3@EndSwitchQ:
; Line 66
  00062	56		 push	 esi
  00063	ff d3		 call	 ebx
  00065	47		 inc	 edi
  00066	83 c6 18	 add	 esi, 24			; 00000018H
  00069	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
  0006f	72 f1		 jb	 SHORT $LL3@EndSwitchQ
  00071	5b		 pop	 ebx
$LN1@EndSwitchQ:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
; Line 67
  00074	c3		 ret	 0
?EndSwitchQueThread@@YAXXZ ENDP				; EndSwitchQueThread
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?StartSwitchQueThread@@YAHPAXK@Z
_TEXT	SEGMENT
_hMsgHandle$ = 8					; size = 4
_ThreadID$ = 12						; size = 4
_dwWorkerThreadNum$ = 12				; size = 4
?StartSwitchQueThread@@YAHPAXK@Z PROC			; StartSwitchQueThread, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\switch_que.cpp
; Line 22
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 23
  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwWorkerThreadNum$[ebp]
  00006	56		 push	 esi
; Line 28
  00007	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CreateEventA@16
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _hMsgHandle$[ebp]
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	a3 00 00 00 00	 mov	 DWORD PTR ?g_dwSwitchQueCSNum@@3KA, eax ; g_dwSwitchQueCSNum
  0001e	89 3d 00 00 00
	00		 mov	 DWORD PTR ?g_hSwitchHandle@@3PAXA, edi ; g_hSwitchHandle
  00024	ff d6		 call	 esi
; Line 29
  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	a3 00 00 00 00	 mov	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA, eax
  00033	ff d6		 call	 esi
; Line 30
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	a3 04 00 00 00	 mov	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA+4, eax
  00042	ff d6		 call	 esi
  00044	a3 00 00 00 00	 mov	 DWORD PTR ?g_hProcessComplete@@3PAXA, eax ; g_hProcessComplete
; Line 33
  00049	8d 45 0c	 lea	 eax, DWORD PTR _ThreadID$[ebp]
  0004c	50		 push	 eax
  0004d	6a 00		 push	 0
  0004f	57		 push	 edi
  00050	68 00 00 00 00	 push	 OFFSET ?SwitchQueThread@@YGIPAX@Z ; SwitchQueThread
  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	e8 00 00 00 00	 call	 __beginthreadex
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	a3 00 00 00 00	 mov	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA, eax ; g_hSwitchQueueThread
; Line 35
  00066	83 f8 ff	 cmp	 eax, -1
  00069	75 1a		 jne	 SHORT $LN4@StartSwitc
; Line 37
  0006b	6a 00		 push	 0
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error?$AA@
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MHJJHHCF@Fail?5to?5Create?5SwitchThread?$AA@
  00077	6a 00		 push	 0
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0007f	5f		 pop	 edi
; Line 38
  00080	33 c0		 xor	 eax, eax
  00082	5e		 pop	 esi
; Line 50
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN4@StartSwitc:
; Line 41
  00085	6a 02		 push	 2
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8
; Line 43
  0008e	33 f6		 xor	 esi, esi
  00090	39 35 00 00 00
	00		 cmp	 DWORD PTR ?g_dwSwitchQueCSNum@@3KA, esi ; g_dwSwitchQueCSNum
  00096	76 21		 jbe	 SHORT $LN1@StartSwitc
; Line 41
  00098	53		 push	 ebx
  00099	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8
  0009f	bf 00 00 00 00	 mov	 edi, OFFSET ?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A ; g_csSwitchQue
$LL3@StartSwitc:
; Line 45
  000a4	68 e8 03 00 00	 push	 1000			; 000003e8H
  000a9	57		 push	 edi
  000aa	ff d3		 call	 ebx
  000ac	46		 inc	 esi
  000ad	83 c7 18	 add	 edi, 24			; 00000018H
  000b0	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
  000b6	72 ec		 jb	 SHORT $LL3@StartSwitc
  000b8	5b		 pop	 ebx
$LN1@StartSwitc:
  000b9	5f		 pop	 edi
; Line 48
  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	5e		 pop	 esi
; Line 50
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
?StartSwitchQueThread@@YAHPAXK@Z ENDP			; StartSwitchQueThread
_TEXT	ENDS
END
