; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\create_index.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Initialize@CIndexCreator@@QAEHK@Z		; CIndexCreator::Initialize
PUBLIC	?GetIndexNum@CIndexCreator@@QAEKXZ		; CIndexCreator::GetIndexNum
PUBLIC	??0CIndexCreator@@QAE@XZ			; CIndexCreator::CIndexCreator
PUBLIC	??1CIndexCreator@@QAE@XZ			; CIndexCreator::~CIndexCreator
PUBLIC	?ICAllocIndex@@YGKPAVCIndexCreator@@@Z		; ICAllocIndex
PUBLIC	?ICFreeIndex@@YGXPAVCIndexCreator@@K@Z		; ICFreeIndex
PUBLIC	?InitializeIndexDesc@@YAXPAXK@Z			; InitializeIndexDesc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?InitializeIndexDesc@@YAXPAXK@Z
_TEXT	SEGMENT
_pEntry$ = 8						; size = 4
_dwNum$ = 12						; size = 4
?InitializeIndexDesc@@YAXPAXK@Z PROC			; InitializeIndexDesc, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\create_index.cpp
; Line 133
  00000	c8 00 00 00	 enter	 0, 0
; Line 135
  00004	56		 push	 esi
; Line 136
  00005	57		 push	 edi
; Line 137
  00006	50		 push	 eax
; Line 138
  00007	52		 push	 edx
; Line 139
  00008	51		 push	 ecx
; Line 141
  00009	33 c0		 xor	 eax, eax
; Line 142
  0000b	33 d2		 xor	 edx, edx
; Line 143
  0000d	40		 inc	 eax
; Line 144
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _pEntry$[ebp]
; Line 145
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _dwNum$[ebp]
; Line 146
  00014	8b f7		 mov	 esi, edi
; Line 147
  00016	83 c7 08	 add	 edi, 8
; Line 148
  00019	49		 dec	 ecx
$lb_loop$4:
; Line 151
  0001a	89 47 f8	 mov	 DWORD PTR [edi-8], eax
; Line 152
  0001d	89 7f fc	 mov	 DWORD PTR [edi-4], edi
; Line 153
  00020	40		 inc	 eax
; Line 154
  00021	83 c7 08	 add	 edi, 8
; Line 156
  00024	e2 f4		 loop	 $lb_loop$4
; Line 158
  00026	89 57 fc	 mov	 DWORD PTR [edi-4], edx
; Line 159
  00029	89 47 f8	 mov	 DWORD PTR [edi-8], eax
; Line 161
  0002c	59		 pop	 ecx
; Line 162
  0002d	5a		 pop	 edx
; Line 163
  0002e	58		 pop	 eax
; Line 164
  0002f	5f		 pop	 edi
; Line 165
  00030	5e		 pop	 esi
; Line 167
  00031	c9		 leave
; Line 168
  00032	c3		 ret	 0
?InitializeIndexDesc@@YAXPAXK@Z ENDP			; InitializeIndexDesc
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?ICFreeIndex@@YGXPAVCIndexCreator@@K@Z
_TEXT	SEGMENT
_pIC$ = 8						; size = 4
_dwIndex$ = 12						; size = 4
?ICFreeIndex@@YGXPAVCIndexCreator@@K@Z PROC		; ICFreeIndex, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\create_index.cpp
; Line 72
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; Line 76
  00006	33 d2		 xor	 edx, edx
; Line 77
  00008	8b 5d 08	 mov	 ebx, DWORD PTR _pIC$[ebp]
; Line 78
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _dwIndex$[ebp]
; Line 79
  0000e	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
; Line 80
  00011	c1 e0 02	 shl	 eax, 2
; Line 81
  00014	03 f8		 add	 edi, eax
; Line 82
  00016	8b 37		 mov	 esi, DWORD PTR [edi]
; Line 84
  00018	0b f6		 or	 esi, esi
; Line 85
  0001a	74 1d		 je	 SHORT $lb_return$4
; Line 87
  0001c	89 17		 mov	 DWORD PTR [edi], edx
; Line 88
  0001e	89 56 04	 mov	 DWORD PTR [esi+4], edx
; Line 90
  00021	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
; Line 93
  00024	0b ff		 or	 edi, edi
; Line 94
  00026	75 08		 jne	 SHORT $lb_not_null$5
; Line 97
  00028	89 73 04	 mov	 DWORD PTR [ebx+4], esi
; Line 98
  0002b	89 73 14	 mov	 DWORD PTR [ebx+20], esi
; Line 99
  0002e	eb 06		 jmp	 SHORT $lb_end$6
$lb_not_null$5:
; Line 102
  00030	89 77 04	 mov	 DWORD PTR [edi+4], esi
; Line 103
  00033	89 73 14	 mov	 DWORD PTR [ebx+20], esi
$lb_end$6:
; Line 107
  00036	ff 4b 0c	 dec	 DWORD PTR [ebx+12]
$lb_return$4:
; Line 73
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
; Line 111
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
?ICFreeIndex@@YGXPAVCIndexCreator@@K@Z ENDP		; ICFreeIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?ICAllocIndex@@YGKPAVCIndexCreator@@@Z
_TEXT	SEGMENT
_dwResult$ = -4						; size = 4
_pIC$ = 8						; size = 4
?ICAllocIndex@@YGKPAVCIndexCreator@@@Z PROC		; ICAllocIndex, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\create_index.cpp
; Line 34
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; Line 38
  00007	33 c0		 xor	 eax, eax
; Line 39
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _pIC$[ebp]
; Line 40
  0000c	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; Line 41
  0000f	0b f6		 or	 esi, esi
; Line 42
  00011	74 1e		 je	 SHORT $lb_return$4
; Line 44
  00013	8b 16		 mov	 edx, DWORD PTR [esi]
; Line 45
  00015	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
; Line 46
  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; Line 47
  0001b	89 43 04	 mov	 DWORD PTR [ebx+4], eax
; Line 51
  0001e	0b c0		 or	 eax, eax
; Line 52
  00020	75 03		 jne	 SHORT $lb_skip$5
; Line 55
  00022	89 43 14	 mov	 DWORD PTR [ebx+20], eax
$lb_skip$5:
; Line 60
  00025	8b c2		 mov	 eax, edx
; Line 61
  00027	c1 e2 02	 shl	 edx, 2
; Line 62
  0002a	03 fa		 add	 edi, edx
; Line 63
  0002c	89 37		 mov	 DWORD PTR [edi], esi
; Line 64
  0002e	ff 43 0c	 inc	 DWORD PTR [ebx+12]
$lb_return$4:
; Line 66
  00031	89 45 fc	 mov	 DWORD PTR _dwResult$[ebp], eax
; Line 68
  00034	8b 45 fc	 mov	 eax, DWORD PTR _dwResult$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
; Line 69
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?ICAllocIndex@@YGKPAVCIndexCreator@@@Z ENDP		; ICAllocIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CIndexCreator@@QAE@XZ
_TEXT	SEGMENT
??1CIndexCreator@@QAE@XZ PROC				; CIndexCreator::~CIndexCreator, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\create_index.cpp
; Line 115
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; Line 116
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 0f		 je	 SHORT $LN2@CIndexCrea
; Line 118
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; Line 119
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN2@CIndexCrea:
; Line 121
  00018	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001b	85 c0		 test	 eax, eax
  0001d	74 10		 je	 SHORT $LN1@CIndexCrea
; Line 123
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
; Line 124
  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@CIndexCrea:
  0002f	5e		 pop	 esi
; Line 127
  00030	c3		 ret	 0
??1CIndexCreator@@QAE@XZ ENDP				; CIndexCreator::~CIndexCreator
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CIndexCreator@@QAE@XZ
_TEXT	SEGMENT
??0CIndexCreator@@QAE@XZ PROC				; CIndexCreator::CIndexCreator, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\create_index.cpp
; Line 8
  00000	0f 57 c0	 xorps	 xmm0, xmm0
; Line 10
  00003	8b c1		 mov	 eax, ecx
  00005	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00009	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  0000e	c3		 ret	 0
??0CIndexCreator@@QAE@XZ ENDP				; CIndexCreator::CIndexCreator
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetIndexNum@CIndexCreator@@QAEKXZ
_TEXT	SEGMENT
?GetIndexNum@CIndexCreator@@QAEKXZ PROC			; CIndexCreator::GetIndexNum, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\create_index.cpp
; Line 30
  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; Line 31
  00003	c3		 ret	 0
?GetIndexNum@CIndexCreator@@QAEKXZ ENDP			; CIndexCreator::GetIndexNum
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?Initialize@CIndexCreator@@QAEHK@Z
_TEXT	SEGMENT
_dwMaxNum$ = 8						; size = 4
?Initialize@CIndexCreator@@QAEHK@Z PROC			; CIndexCreator::Initialize, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\create_index.cpp
; Line 14
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 17
  00004	8b 75 08	 mov	 esi, DWORD PTR _dwMaxNum$[ebp]
; Line 18
  00007	ba 08 00 00 00	 mov	 edx, 8
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	8b c6		 mov	 eax, esi
  00011	33 c9		 xor	 ecx, ecx
  00013	f7 e2		 mul	 edx
  00015	89 77 10	 mov	 DWORD PTR [edi+16], esi
  00018	0f 90 c1	 seto	 cl
  0001b	f7 d9		 neg	 ecx
  0001d	0b c8		 or	 ecx, eax
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; Line 19
  00025	56		 push	 esi
  00026	50		 push	 eax
  00027	89 07		 mov	 DWORD PTR [edi], eax
  00029	e8 00 00 00 00	 call	 ?InitializeIndexDesc@@YAXPAXK@Z ; InitializeIndexDesc
; Line 20
  0002e	8b 07		 mov	 eax, DWORD PTR [edi]
; Line 23
  00030	33 c9		 xor	 ecx, ecx
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00035	ba 04 00 00 00	 mov	 edx, 4
  0003a	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
  0003d	83 c0 f8	 add	 eax, -8			; fffffff8H
  00040	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00043	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00046	f7 e2		 mul	 edx
  00048	0f 90 c1	 seto	 cl
  0004b	f7 d9		 neg	 ecx
  0004d	0b c8		 or	 ecx, eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; Line 24
  00055	8d 0c b5 04 00
	00 00		 lea	 ecx, DWORD PTR [esi*4+4]
  0005c	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0005f	51		 push	 ecx
  00060	6a 00		 push	 0
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _memset
  00068	83 c4 1c	 add	 esp, 28			; 0000001cH
; Line 26
  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
; Line 27
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?Initialize@CIndexCreator@@QAEHK@Z ENDP			; CIndexCreator::Initialize
_TEXT	ENDS
END
