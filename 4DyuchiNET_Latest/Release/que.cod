; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\que.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A		; g_csWrite
_BSS	SEGMENT
?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?)	; g_csWrite
_BSS	ENDS
PUBLIC	?PushMsg@CMsgQue@@QAEHKPAU_WSABUF@@KKKPAK@Z	; CMsgQue::PushMsg
PUBLIC	??0CMsgQue@@QAE@K@Z				; CMsgQue::CMsgQue
PUBLIC	??1CMsgQue@@QAE@XZ				; CMsgQue::~CMsgQue
PUBLIC	?GetMsgContainer@@YAPAUMSG_CONTAINER@@PAVCMsgQue@@@Z ; GetMsgContainer
PUBLIC	?PushMsg@@YAHPAVCMsgQue@@KPAU_WSABUF@@KKKPAK@Z	; PushMsg
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp
;	COMDAT ?PushMsg@@YAHPAVCMsgQue@@KPAU_WSABUF@@KKKPAK@Z
_TEXT	SEGMENT
_pDest$ = -20						; size = 4
_pEntry$ = -16						; size = 4
_pcs$ = -12						; size = 4
_dwSize$ = -8						; size = 4
_bResult$ = -4						; size = 4
_pMsgQue$ = 8						; size = 4
_dwHeader$ = 12						; size = 4
_pBuf$ = 16						; size = 4
_dwBufNum$ = 20						; size = 4
_dwTotalMsgSize$ = 24					; size = 4
_dwFlag$ = 28						; size = 4
_pdwMsgNum$ = 32					; size = 4
?PushMsg@@YAHPAVCMsgQue@@KPAU_WSABUF@@KKKPAK@Z PROC	; PushMsg, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 74
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 84
  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pEntry$[ebp], 0
; Line 85
  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pDest$[ebp], 0
; Line 86
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 0
; Line 92
  0001e	33 c9		 xor	 ecx, ecx
; Line 93
  00020	89 4d fc	 mov	 DWORD PTR _bResult$[ebp], ecx
; Line 95
  00023	8b 5d 08	 mov	 ebx, DWORD PTR _pMsgQue$[ebp]
; Line 96
  00026	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
; Line 97
  0002b	8b 45 14	 mov	 eax, DWORD PTR _dwBufNum$[ebp]
; Line 98
  0002e	f7 e2		 mul	 edx
; Line 100
  00030	03 45 18	 add	 eax, DWORD PTR _dwTotalMsgSize$[ebp]
; Line 101
  00033	89 45 f8	 mov	 DWORD PTR _dwSize$[ebp], eax
; Line 107
  00036	b8 00 00 00 00	 mov	 eax, OFFSET ?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A
; Line 108
  0003b	89 45 f4	 mov	 DWORD PTR _pcs$[ebp], eax
; Line 110
  0003e	50		 push	 eax
; Line 111
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 113
  00045	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
; Line 114
  00048	8b 75 f8	 mov	 esi, DWORD PTR _dwSize$[ebp]
; Line 115
  0004b	8b c8		 mov	 ecx, eax
; Line 116
  0004d	03 c6		 add	 eax, esi
; Line 118
  0004f	3b 43 10	 cmp	 eax, DWORD PTR [ebx+16]
; Line 119
  00052	7c 0f		 jl	 SHORT $lb_push$3
; Line 121
  00054	8b 45 f4	 mov	 eax, DWORD PTR _pcs$[ebp]
; Line 122
  00057	50		 push	 eax
; Line 123
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 124
  0005e	e9 83 00 00 00	 jmp	 $lb_return$4
$lb_push$3:
; Line 128
  00063	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
; Line 130
  00066	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; Line 132
  00069	03 d1		 add	 edx, ecx
; Line 133
  0006b	89 55 f0	 mov	 DWORD PTR _pEntry$[ebp], edx
; Line 135
  0006e	8b 7d 20	 mov	 edi, DWORD PTR _pdwMsgNum$[ebp]
; Line 136
  00071	8b 55 14	 mov	 edx, DWORD PTR _dwBufNum$[ebp]
; Line 137
  00074	03 13		 add	 edx, DWORD PTR [ebx]
; Line 138
  00076	89 17		 mov	 DWORD PTR [edi], edx
; Line 139
  00078	89 13		 mov	 DWORD PTR [ebx], edx
; Line 145
  0007a	8b 45 f4	 mov	 eax, DWORD PTR _pcs$[ebp]
; Line 146
  0007d	50		 push	 eax
; Line 147
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 157
  00084	8b 7d f0	 mov	 edi, DWORD PTR _pEntry$[ebp]
; Line 158
  00087	8b 45 10	 mov	 eax, DWORD PTR _pBuf$[ebp]
; Line 159
  0008a	0f 6e 4d 0c	 movd	 mm1, DWORD PTR _dwHeader$[ebp]
; Line 160
  0008e	8b 55 14	 mov	 edx, DWORD PTR _dwBufNum$[ebp]
$lb_loop$5:
; Line 167
  00091	8b 4d 1c	 mov	 ecx, DWORD PTR _dwFlag$[ebp]
; Line 168
  00094	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
; Line 170
  00097	0f 7e 0f	 movd	 DWORD PTR [edi], mm1
; Line 171
  0009a	c7 47 04 10 00
	00 00		 mov	 DWORD PTR [edi+4], 16	; 00000010H
; Line 172
  000a1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; Line 174
  000a8	0b c0		 or	 eax, eax
; Line 175
  000aa	74 37		 je	 SHORT $lb_return_true$6
; Line 177
  000ac	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
; Line 178
  000af	8b 08		 mov	 ecx, DWORD PTR [eax]
; Line 180
  000b1	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
; Line 183
  000b4	83 c7 10	 add	 edi, 16			; 00000010H
; Line 189
  000b7	0b c9		 or	 ecx, ecx
; Line 190
  000b9	74 20		 je	 SHORT $lb_cpy_end$7
; Line 192
  000bb	f7 c1 01 00 00
	00		 test	 ecx, 1
; Line 193
  000c1	74 04		 je	 SHORT $lb_cpy_2$8
; Line 194
  000c3	a4		 movsb
; Line 195
  000c4	49		 dec	 ecx
; Line 196
  000c5	74 14		 je	 SHORT $lb_cpy_end$7
$lb_cpy_2$8:
; Line 199
  000c7	f7 c1 02 00 00
	00		 test	 ecx, 2
; Line 200
  000cd	74 07		 je	 SHORT $lb_cpy_4$9
; Line 201
  000cf	66 a5		 movsw
; Line 202
  000d1	83 e9 02	 sub	 ecx, 2
; Line 203
  000d4	74 05		 je	 SHORT $lb_cpy_end$7
$lb_cpy_4$9:
; Line 206
  000d6	c1 e9 02	 shr	 ecx, 2
; Line 207
  000d9	f3 a5		 rep	  movsd
$lb_cpy_end$7:
; Line 210
  000db	83 c0 08	 add	 eax, 8
; Line 211
  000de	4a		 dec	 edx
; Line 212
  000df	75 b0		 jne	 SHORT $lb_loop$5
; Line 214
  000e1	0f 77		 emms
$lb_return_true$6:
; Line 217
  000e3	ff 45 fc	 inc	 DWORD PTR _bResult$[ebp]
$lb_return$4:
; Line 221
  000e6	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]
; Line 223
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
?PushMsg@@YAHPAVCMsgQue@@KPAU_WSABUF@@KKKPAK@Z ENDP	; PushMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?GetMsgContainer@@YAPAUMSG_CONTAINER@@PAVCMsgQue@@@Z
_TEXT	SEGMENT
_pContainer$ = -4					; size = 4
_pMsgQue$ = 8						; size = 4
?GetMsgContainer@@YAPAUMSG_CONTAINER@@PAVCMsgQue@@@Z PROC ; GetMsgContainer, COMDAT
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 27
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 40
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _pMsgQue$[ebp]
; Line 41
  00008	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
; Line 42
  0000b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; Line 43
  0000e	03 c2		 add	 eax, edx
; Line 45
  00010	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; Line 46
  00013	83 c1 10	 add	 ecx, 16			; 00000010H
; Line 47
  00016	03 d1		 add	 edx, ecx
; Line 48
  00018	89 53 08	 mov	 DWORD PTR [ebx+8], edx
; Line 51
  0001b	89 45 fc	 mov	 DWORD PTR _pContainer$[ebp], eax
; Line 53
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _pContainer$[ebp]
  00021	5b		 pop	 ebx
; Line 59
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?GetMsgContainer@@YAPAUMSG_CONTAINER@@PAVCMsgQue@@@Z ENDP ; GetMsgContainer
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CMsgQue@@QAE@XZ
_TEXT	SEGMENT
??1CMsgQue@@QAE@XZ PROC					; CMsgQue::~CMsgQue, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 62
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; Line 65
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 10		 je	 SHORT $LN1@CMsgQue
; Line 67
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
; Line 68
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN1@CMsgQue:
  0001a	5e		 pop	 esi
; Line 70
  0001b	c3		 ret	 0
??1CMsgQue@@QAE@XZ ENDP					; CMsgQue::~CMsgQue
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CMsgQue@@QAE@K@Z
_TEXT	SEGMENT
_dwMaxBufferSize$ = 8					; size = 4
??0CMsgQue@@QAE@K@Z PROC				; CMsgQue::CMsgQue, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 11
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 19
  00004	8b 75 08	 mov	 esi, DWORD PTR _dwMaxBufferSize$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; Line 20
  0000a	56		 push	 esi
  0000b	c7 47 14 01 00
	00 00		 mov	 DWORD PTR [edi+20], 1
  00012	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00019	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00020	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00026	89 77 10	 mov	 DWORD PTR [edi+16], esi
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; Line 21
  0002e	56		 push	 esi
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00035	e8 00 00 00 00	 call	 _memset
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
; Line 22
  0003d	8b c7		 mov	 eax, edi
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??0CMsgQue@@QAE@K@Z ENDP				; CMsgQue::CMsgQue
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?PushMsg@CMsgQue@@QAEHKPAU_WSABUF@@KKKPAK@Z
_TEXT	SEGMENT
_dwHeader$ = 8						; size = 4
_pBuf$ = 12						; size = 4
_dwBufNum$ = 16						; size = 4
_dwTotalMsgSize$ = 20					; size = 4
_dwFlag$ = 24						; size = 4
_pdwMsgNum$ = 28					; size = 4
?PushMsg@CMsgQue@@QAEHKPAU_WSABUF@@KKKPAK@Z PROC	; CMsgQue::PushMsg, COMDAT
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 226
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; Line 232
  00005	8b 75 10	 mov	 esi, DWORD PTR _dwBufNum$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	c1 e6 04	 shl	 esi, 4
  0000e	03 75 14	 add	 esi, DWORD PTR _dwTotalMsgSize$[ebp]
; Line 235
  00011	68 00 00 00 00	 push	 OFFSET ?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A ; g_csWrite
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 237
  0001c	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0001f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00022	03 f8		 add	 edi, eax
; Line 239
  00024	03 c6		 add	 eax, esi
; Line 241
  00026	68 00 00 00 00	 push	 OFFSET ?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A ; g_csWrite
  0002b	3b 43 10	 cmp	 eax, DWORD PTR [ebx+16]
  0002e	76 0f		 jbe	 SHORT $LN4@PushMsg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
; Line 242
  00038	33 c0		 xor	 eax, eax
  0003a	5b		 pop	 ebx
; Line 261
  0003b	5d		 pop	 ebp
  0003c	c2 18 00	 ret	 24			; 00000018H
$LN4@PushMsg:
; Line 245
  0003f	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
; Line 246
  00042	8b 45 10	 mov	 eax, DWORD PTR _dwBufNum$[ebp]
  00045	01 03		 add	 DWORD PTR [ebx], eax
; Line 247
  00047	8b 45 1c	 mov	 eax, DWORD PTR _pdwMsgNum$[ebp]
  0004a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004c	89 08		 mov	 DWORD PTR [eax], ecx
; Line 249
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 252
  00054	8b 5d 10	 mov	 ebx, DWORD PTR _dwBufNum$[ebp]
  00057	33 f6		 xor	 esi, esi
  00059	85 db		 test	 ebx, ebx
  0005b	74 36		 je	 SHORT $LN1@PushMsg
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _pBuf$[ebp]
$LL3@PushMsg:
; Line 255
  00060	8b 45 08	 mov	 eax, DWORD PTR _dwHeader$[ebp]
  00063	89 07		 mov	 DWORD PTR [edi], eax
  00065	c7 47 04 10 00
	00 00		 mov	 DWORD PTR [edi+4], 16	; 00000010H
; Line 256
  0006c	8b 04 f1	 mov	 eax, DWORD PTR [ecx+esi*8]
  0006f	89 47 08	 mov	 DWORD PTR [edi+8], eax
; Line 257
  00072	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00075	ff 34 f1	 push	 DWORD PTR [ecx+esi*8]
  00078	ff 74 f1 04	 push	 DWORD PTR [ecx+esi*8+4]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _memcpy
; Line 258
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  00085	83 c7 10	 add	 edi, 16			; 00000010H
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	03 3c f1	 add	 edi, DWORD PTR [ecx+esi*8]
  0008e	46		 inc	 esi
  0008f	3b f3		 cmp	 esi, ebx
  00091	72 cd		 jb	 SHORT $LL3@PushMsg
$LN1@PushMsg:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
; Line 260
  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	5b		 pop	 ebx
; Line 261
  0009b	5d		 pop	 ebp
  0009c	c2 18 00	 ret	 24			; 00000018H
?PushMsg@CMsgQue@@QAEHKPAU_WSABUF@@KKKPAK@Z ENDP	; CMsgQue::PushMsg
_TEXT	ENDS
END
