; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\switch_que.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_hSwitchQueueThread@@3PAXA			; g_hSwitchQueueThread
PUBLIC	?g_hSwitchHandle@@3PAXA				; g_hSwitchHandle
PUBLIC	?g_dwSwitchQueCSNum@@3KA			; g_dwSwitchQueCSNum
PUBLIC	?g_dwSwitchEnable@@3KA				; g_dwSwitchEnable
PUBLIC	?g_hEventMustSwitch@@3PAPAXA			; g_hEventMustSwitch
PUBLIC	?g_hProcessComplete@@3PAXA			; g_hProcessComplete
PUBLIC	?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A	; g_csSwitchQue
_BSS	SEGMENT
?g_hSwitchQueueThread@@3PAXA DD 01H DUP (?)		; g_hSwitchQueueThread
?g_hSwitchHandle@@3PAXA DD 01H DUP (?)			; g_hSwitchHandle
?g_dwSwitchQueCSNum@@3KA DD 01H DUP (?)			; g_dwSwitchQueCSNum
?g_dwSwitchEnable@@3KA DD 01H DUP (?)			; g_dwSwitchEnable
?g_hEventMustSwitch@@3PAPAXA DD 02H DUP (?)		; g_hEventMustSwitch
?g_hProcessComplete@@3PAXA DD 01H DUP (?)		; g_hProcessComplete
?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A DB 0600H DUP (?) ; g_csSwitchQue
_BSS	ENDS
CONST	SEGMENT
$SG91286 DB	'Error', 00H
	ORG $+2
$SG91287 DB	'Fail to Create SwitchThread', 00H
CONST	ENDS
PUBLIC	?StartSwitchQueThread@@YAHPAXK@Z		; StartSwitchQueThread
PUBLIC	?EndSwitchQueThread@@YAXXZ			; EndSwitchQueThread
PUBLIC	?SwitchQueThread@@YGIPAX@Z			; SwitchQueThread
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__beginthreadex:PROC
EXTRN	__endthreadex:PROC
EXTRN	?g_pQueManager@@3PAVCQueManager@@A:DWORD	; g_pQueManager
; Function compile flags: /Odspy
_TEXT	SEGMENT
_dwMsgNum$ = -16					; size = 4
_pEvent$ = -12						; size = 4
_count$ = -8						; size = 4
_pcsSwitchQue$ = -4					; size = 4
_lpVoid$ = 8						; size = 4
?SwitchQueThread@@YGIPAX@Z PROC				; SwitchQueThread
; File e:\github\mso_code\4dyuchinet_latest\switch_que.cpp
; Line 72
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; Line 82
  00007	ba 00 00 00 00	 mov	 edx, OFFSET ?g_hEventMustSwitch@@3PAPAXA
; Line 83
  0000c	89 55 f4	 mov	 DWORD PTR _pEvent$[ebp], edx
$lb_loop$3:
; Line 86
  0000f	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
; Line 87
  00012	6a ff		 push	 -1
; Line 88
  00014	6a 00		 push	 0
; Line 89
  00016	52		 push	 edx
; Line 90
  00017	6a 02		 push	 2
; Line 91
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForMultipleObjects@16
; Line 93
  0001f	0b c0		 or	 eax, eax
; Line 94
  00021	0f 85 88 00 00
	00		 jne	 $lb_return$4
; Line 97
  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A
; Line 98
  0002c	89 45 fc	 mov	 DWORD PTR _pcsSwitchQue$[ebp], eax
; Line 100
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
; Line 101
  00035	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$lb_enter_count$5:
; Line 104
  00038	8b 55 fc	 mov	 edx, DWORD PTR _pcsSwitchQue$[ebp]
; Line 105
  0003b	52		 push	 edx
; Line 106
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 108
  00042	83 45 fc 18	 add	 DWORD PTR _pcsSwitchQue$[ebp], 24 ; 00000018H
; Line 109
  00046	ff 4d f8	 dec	 DWORD PTR _count$[ebp]
; Line 110
  00049	75 ed		 jne	 SHORT $lb_enter_count$5
; Line 114
  0004b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?g_pQueManager@@3PAVCQueManager@@A ; g_pQueManager
; Line 115
  00051	8b 03		 mov	 eax, DWORD PTR [ebx]
; Line 116
  00053	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; Line 117
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
; Line 118
  00058	89 4d f0	 mov	 DWORD PTR _dwMsgNum$[ebp], ecx
; Line 119
  0005b	0b c9		 or	 ecx, ecx
; Line 120
  0005d	74 05		 je	 SHORT $lb_leave$6
; Line 122
  0005f	89 13		 mov	 DWORD PTR [ebx], edx
; Line 123
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$lb_leave$6:
; Line 127
  00064	83 6d fc 18	 sub	 DWORD PTR _pcsSwitchQue$[ebp], 24 ; 00000018H
; Line 128
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
; Line 129
  0006e	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$lb_leave_count$7:
; Line 132
  00071	8b 55 fc	 mov	 edx, DWORD PTR _pcsSwitchQue$[ebp]
; Line 133
  00074	52		 push	 edx
; Line 134
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 136
  0007b	83 6d fc 18	 sub	 DWORD PTR _pcsSwitchQue$[ebp], 24 ; 00000018H
; Line 137
  0007f	ff 4d f8	 dec	 DWORD PTR _count$[ebp]
; Line 138
  00082	75 ed		 jne	 SHORT $lb_leave_count$7
; Line 140
  00084	33 c0		 xor	 eax, eax
; Line 141
  00086	0b 45 f0	 or	 eax, DWORD PTR _dwMsgNum$[ebp]
; Line 142
  00089	74 84		 je	 SHORT $lb_loop$3
; Line 145
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_hSwitchHandle@@3PAXA ; g_hSwitchHandle
; Line 146
  00091	51		 push	 ecx
; Line 147
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 150
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_hProcessComplete@@3PAXA ; g_hProcessComplete
; Line 151
  0009e	6a ff		 push	 -1
; Line 152
  000a0	52		 push	 edx
; Line 153
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 154
  000a7	0b c0		 or	 eax, eax
; Line 155
  000a9	0f 84 60 ff ff
	ff		 je	 $lb_loop$3
$lb_return$4:
; Line 158
  000af	6a 00		 push	 0
  000b1	e8 00 00 00 00	 call	 __endthreadex
  000b6	59		 pop	 ecx
; Line 159
  000b7	33 c0		 xor	 eax, eax
; Line 160
  000b9	5b		 pop	 ebx
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
?SwitchQueThread@@YGIPAX@Z ENDP				; SwitchQueThread
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?EndSwitchQueThread@@YAXXZ PROC				; EndSwitchQueThread
; File e:\github\mso_code\4dyuchinet_latest\switch_que.cpp
; Line 54
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 55
  00004	6a 04		 push	 4
  00006	58		 pop	 eax
  00007	c1 e0 00	 shl	 eax, 0
  0000a	ff b0 00 00 00
	00		 push	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA[eax]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 57
  00016	6a ff		 push	 -1
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA ; g_hSwitchQueueThread
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 59
  00024	6a 04		 push	 4
  00026	58		 pop	 eax
  00027	6b c0 00	 imul	 eax, eax, 0
  0002a	ff b0 00 00 00
	00		 push	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA[eax]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 60
  00036	6a 04		 push	 4
  00038	58		 pop	 eax
  00039	c1 e0 00	 shl	 eax, 0
  0003c	ff b0 00 00 00
	00		 push	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA[eax]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 61
  00048	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hProcessComplete@@3PAXA ; g_hProcessComplete
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 62
  00054	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA ; g_hSwitchQueueThread
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 63
  00060	83 25 00 00 00
	00 00		 and	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA, 0 ; g_hSwitchQueueThread
; Line 65
  00067	83 65 fc 00	 and	 DWORD PTR _i$1[ebp], 0
  0006b	eb 07		 jmp	 SHORT $LN3@EndSwitchQ
$LN2@EndSwitchQ:
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00070	40		 inc	 eax
  00071	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@EndSwitchQ:
  00074	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00077	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
  0007d	73 12		 jae	 SHORT $LN4@EndSwitchQ
; Line 66
  0007f	6b 45 fc 18	 imul	 eax, DWORD PTR _i$1[ebp], 24
  00083	05 00 00 00 00	 add	 eax, OFFSET ?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A ; g_csSwitchQue
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  0008f	eb dc		 jmp	 SHORT $LN2@EndSwitchQ
$LN4@EndSwitchQ:
; Line 67
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?EndSwitchQueThread@@YAXXZ ENDP				; EndSwitchQueThread
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_ThreadID$ = -8						; size = 4
_i$1 = -4						; size = 4
_hMsgHandle$ = 8					; size = 4
_dwWorkerThreadNum$ = 12				; size = 4
?StartSwitchQueThread@@YAHPAXK@Z PROC			; StartSwitchQueThread
; File e:\github\mso_code\4dyuchinet_latest\switch_que.cpp
; Line 22
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
; Line 23
  00005	8b 45 0c	 mov	 eax, DWORD PTR _dwWorkerThreadNum$[ebp]
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?g_dwSwitchQueCSNum@@3KA, eax ; g_dwSwitchQueCSNum
; Line 24
  0000d	8b 45 08	 mov	 eax, DWORD PTR _hMsgHandle$[ebp]
  00010	a3 00 00 00 00	 mov	 DWORD PTR ?g_hSwitchHandle@@3PAXA, eax ; g_hSwitchHandle
; Line 28
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  00023	6a 04		 push	 4
  00025	59		 pop	 ecx
  00026	6b c9 00	 imul	 ecx, ecx, 0
  00029	89 81 00 00 00
	00		 mov	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA[ecx], eax
; Line 29
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  0003d	6a 04		 push	 4
  0003f	59		 pop	 ecx
  00040	c1 e1 00	 shl	 ecx, 0
  00043	89 81 00 00 00
	00		 mov	 DWORD PTR ?g_hEventMustSwitch@@3PAPAXA[ecx], eax
; Line 30
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  00057	a3 00 00 00 00	 mov	 DWORD PTR ?g_hProcessComplete@@3PAXA, eax ; g_hProcessComplete
; Line 33
  0005c	8d 45 f8	 lea	 eax, DWORD PTR _ThreadID$[ebp]
  0005f	50		 push	 eax
  00060	6a 00		 push	 0
  00062	ff 75 08	 push	 DWORD PTR _hMsgHandle$[ebp]
  00065	68 00 00 00 00	 push	 OFFSET ?SwitchQueThread@@YGIPAX@Z ; SwitchQueThread
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	e8 00 00 00 00	 call	 __beginthreadex
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA, eax ; g_hSwitchQueueThread
; Line 35
  0007b	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA, -1 ; g_hSwitchQueueThread
  00082	75 18		 jne	 SHORT $LN4@StartSwitc
; Line 37
  00084	6a 00		 push	 0
  00086	68 00 00 00 00	 push	 OFFSET $SG91286
  0008b	68 00 00 00 00	 push	 OFFSET $SG91287
  00090	6a 00		 push	 0
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
; Line 38
  00098	33 c0		 xor	 eax, eax
  0009a	eb 40		 jmp	 SHORT $LN5@StartSwitc
$LN4@StartSwitc:
; Line 41
  0009c	6a 02		 push	 2
  0009e	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_hSwitchQueueThread@@3PAXA ; g_hSwitchQueueThread
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8
; Line 43
  000aa	83 65 fc 00	 and	 DWORD PTR _i$1[ebp], 0
  000ae	eb 07		 jmp	 SHORT $LN3@StartSwitc
$LN2@StartSwitc:
  000b0	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000b3	40		 inc	 eax
  000b4	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@StartSwitc:
  000b7	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000ba	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_dwSwitchQueCSNum@@3KA ; g_dwSwitchQueCSNum
  000c0	73 17		 jae	 SHORT $LN1@StartSwitc
; Line 45
  000c2	68 e8 03 00 00	 push	 1000			; 000003e8H
  000c7	6b 45 fc 18	 imul	 eax, DWORD PTR _i$1[ebp], 24
  000cb	05 00 00 00 00	 add	 eax, OFFSET ?g_csSwitchQue@@3PAU_RTL_CRITICAL_SECTION@@A ; g_csSwitchQue
  000d0	50		 push	 eax
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8
; Line 47
  000d7	eb d7		 jmp	 SHORT $LN2@StartSwitc
$LN1@StartSwitc:
; Line 48
  000d9	33 c0		 xor	 eax, eax
  000db	40		 inc	 eax
$LN5@StartSwitc:
; Line 50
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
?StartSwitchQueThread@@YAHPAXK@Z ENDP			; StartSwitchQueThread
_TEXT	ENDS
END
