; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\que.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A		; g_csWrite
_BSS	SEGMENT
?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?)	; g_csWrite
_BSS	ENDS
PUBLIC	?PushMsg@CMsgQue@@QAEHKPAU_WSABUF@@KKKPAK@Z	; CMsgQue::PushMsg
PUBLIC	??0CMsgQue@@QAE@K@Z				; CMsgQue::CMsgQue
PUBLIC	??1CMsgQue@@QAE@XZ				; CMsgQue::~CMsgQue
PUBLIC	?GetMsgContainer@@YAPAUMSG_CONTAINER@@PAVCMsgQue@@@Z ; GetMsgContainer
PUBLIC	?PushMsg@@YAHPAVCMsgQue@@KPAU_WSABUF@@KKKPAK@Z	; PushMsg
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odspy
_TEXT	SEGMENT
_pDest$ = -20						; size = 4
_pEntry$ = -16						; size = 4
_pcs$ = -12						; size = 4
_dwSize$ = -8						; size = 4
_bResult$ = -4						; size = 4
_pMsgQue$ = 8						; size = 4
_dwHeader$ = 12						; size = 4
_pBuf$ = 16						; size = 4
_dwBufNum$ = 20						; size = 4
_dwTotalMsgSize$ = 24					; size = 4
_dwFlag$ = 28						; size = 4
_pdwMsgNum$ = 32					; size = 4
?PushMsg@@YAHPAVCMsgQue@@KPAU_WSABUF@@KKKPAK@Z PROC	; PushMsg
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 74
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; Line 84
  00009	83 65 f0 00	 and	 DWORD PTR _pEntry$[ebp], 0
; Line 85
  0000d	83 65 ec 00	 and	 DWORD PTR _pDest$[ebp], 0
; Line 86
  00011	83 65 f8 00	 and	 DWORD PTR _dwSize$[ebp], 0
; Line 92
  00015	33 c9		 xor	 ecx, ecx
; Line 93
  00017	89 4d fc	 mov	 DWORD PTR _bResult$[ebp], ecx
; Line 95
  0001a	8b 5d 08	 mov	 ebx, DWORD PTR _pMsgQue$[ebp]
; Line 96
  0001d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
; Line 97
  00022	8b 45 14	 mov	 eax, DWORD PTR _dwBufNum$[ebp]
; Line 98
  00025	f7 e2		 mul	 edx
; Line 100
  00027	03 45 18	 add	 eax, DWORD PTR _dwTotalMsgSize$[ebp]
; Line 101
  0002a	89 45 f8	 mov	 DWORD PTR _dwSize$[ebp], eax
; Line 107
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A
; Line 108
  00032	89 45 f4	 mov	 DWORD PTR _pcs$[ebp], eax
; Line 110
  00035	50		 push	 eax
; Line 111
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 113
  0003c	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
; Line 114
  0003f	8b 75 f8	 mov	 esi, DWORD PTR _dwSize$[ebp]
; Line 115
  00042	8b c8		 mov	 ecx, eax
; Line 116
  00044	03 c6		 add	 eax, esi
; Line 118
  00046	3b 43 10	 cmp	 eax, DWORD PTR [ebx+16]
; Line 119
  00049	7c 0f		 jl	 SHORT $lb_push$3
; Line 121
  0004b	8b 45 f4	 mov	 eax, DWORD PTR _pcs$[ebp]
; Line 122
  0004e	50		 push	 eax
; Line 123
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 124
  00055	e9 83 00 00 00	 jmp	 $lb_return$4
$lb_push$3:
; Line 128
  0005a	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
; Line 130
  0005d	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; Line 132
  00060	03 d1		 add	 edx, ecx
; Line 133
  00062	89 55 f0	 mov	 DWORD PTR _pEntry$[ebp], edx
; Line 135
  00065	8b 7d 20	 mov	 edi, DWORD PTR _pdwMsgNum$[ebp]
; Line 136
  00068	8b 55 14	 mov	 edx, DWORD PTR _dwBufNum$[ebp]
; Line 137
  0006b	03 13		 add	 edx, DWORD PTR [ebx]
; Line 138
  0006d	89 17		 mov	 DWORD PTR [edi], edx
; Line 139
  0006f	89 13		 mov	 DWORD PTR [ebx], edx
; Line 145
  00071	8b 45 f4	 mov	 eax, DWORD PTR _pcs$[ebp]
; Line 146
  00074	50		 push	 eax
; Line 147
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 157
  0007b	8b 7d f0	 mov	 edi, DWORD PTR _pEntry$[ebp]
; Line 158
  0007e	8b 45 10	 mov	 eax, DWORD PTR _pBuf$[ebp]
; Line 159
  00081	0f 6e 4d 0c	 movd	 mm1, DWORD PTR _dwHeader$[ebp]
; Line 160
  00085	8b 55 14	 mov	 edx, DWORD PTR _dwBufNum$[ebp]
$lb_loop$5:
; Line 167
  00088	8b 4d 1c	 mov	 ecx, DWORD PTR _dwFlag$[ebp]
; Line 168
  0008b	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
; Line 170
  0008e	0f 7e 0f	 movd	 DWORD PTR [edi], mm1
; Line 171
  00091	c7 47 04 10 00
	00 00		 mov	 DWORD PTR [edi+4], 16	; 00000010H
; Line 172
  00098	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; Line 174
  0009f	0b c0		 or	 eax, eax
; Line 175
  000a1	74 37		 je	 SHORT $lb_return_true$6
; Line 177
  000a3	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
; Line 178
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
; Line 180
  000a8	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
; Line 183
  000ab	83 c7 10	 add	 edi, 16			; 00000010H
; Line 189
  000ae	0b c9		 or	 ecx, ecx
; Line 190
  000b0	74 20		 je	 SHORT $lb_cpy_end$7
; Line 192
  000b2	f7 c1 01 00 00
	00		 test	 ecx, 1
; Line 193
  000b8	74 04		 je	 SHORT $lb_cpy_2$8
; Line 194
  000ba	a4		 movsb
; Line 195
  000bb	49		 dec	 ecx
; Line 196
  000bc	74 14		 je	 SHORT $lb_cpy_end$7
$lb_cpy_2$8:
; Line 199
  000be	f7 c1 02 00 00
	00		 test	 ecx, 2
; Line 200
  000c4	74 07		 je	 SHORT $lb_cpy_4$9
; Line 201
  000c6	66 a5		 movsw
; Line 202
  000c8	83 e9 02	 sub	 ecx, 2
; Line 203
  000cb	74 05		 je	 SHORT $lb_cpy_end$7
$lb_cpy_4$9:
; Line 206
  000cd	c1 e9 02	 shr	 ecx, 2
; Line 207
  000d0	f3 a5		 rep	  movsd
$lb_cpy_end$7:
; Line 210
  000d2	83 c0 08	 add	 eax, 8
; Line 211
  000d5	4a		 dec	 edx
; Line 212
  000d6	75 b0		 jne	 SHORT $lb_loop$5
; Line 214
  000d8	0f 77		 emms
$lb_return_true$6:
; Line 217
  000da	ff 45 fc	 inc	 DWORD PTR _bResult$[ebp]
$lb_return$4:
; Line 221
  000dd	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]
; Line 223
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
?PushMsg@@YAHPAVCMsgQue@@KPAU_WSABUF@@KKKPAK@Z ENDP	; PushMsg
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_pContainer$ = -4					; size = 4
_pMsgQue$ = 8						; size = 4
?GetMsgContainer@@YAPAUMSG_CONTAINER@@PAVCMsgQue@@@Z PROC ; GetMsgContainer
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 27
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; Line 40
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _pMsgQue$[ebp]
; Line 41
  00008	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
; Line 42
  0000b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; Line 43
  0000e	03 c2		 add	 eax, edx
; Line 45
  00010	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; Line 46
  00013	83 c1 10	 add	 ecx, 16			; 00000010H
; Line 47
  00016	03 d1		 add	 edx, ecx
; Line 48
  00018	89 53 08	 mov	 DWORD PTR [ebx+8], edx
; Line 51
  0001b	89 45 fc	 mov	 DWORD PTR _pContainer$[ebp], eax
; Line 53
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _pContainer$[ebp]
; Line 59
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?GetMsgContainer@@YAPAUMSG_CONTAINER@@PAVCMsgQue@@@Z ENDP ; GetMsgContainer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1CMsgQue@@QAE@XZ PROC					; CMsgQue::~CMsgQue
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 62
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 65
  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 19		 je	 SHORT $LN2@CMsgQue
; Line 67
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0001a	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	59		 pop	 ecx
; Line 68
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 60 04 00	 and	 DWORD PTR [eax+4], 0
$LN2@CMsgQue:
; Line 70
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1CMsgQue@@QAE@XZ ENDP					; CMsgQue::~CMsgQue
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_dwMaxBufferSize$ = 8					; size = 4
??0CMsgQue@@QAE@K@Z PROC				; CMsgQue::CMsgQue
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 11
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 15
  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1
; Line 16
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; Line 17
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
; Line 18
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 20 00	 and	 DWORD PTR [eax], 0
; Line 19
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dwMaxBufferSize$[ebp]
  0002c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; Line 20
  0002f	ff 75 08	 push	 DWORD PTR _dwMaxBufferSize$[ebp]
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	59		 pop	 ecx
  00038	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00041	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; Line 21
  00044	ff 75 08	 push	 DWORD PTR _dwMaxBufferSize$[ebp]
  00047	6a 00		 push	 0
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	ff 70 04	 push	 DWORD PTR [eax+4]
  0004f	e8 00 00 00 00	 call	 _memset
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 22
  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0CMsgQue@@QAE@K@Z ENDP				; CMsgQue::CMsgQue
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_dwSize$ = -24						; size = 4
_pEntry$ = -20						; size = 4
_size$ = -16						; size = 4
_pDest$ = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_dwHeader$ = 8						; size = 4
_pBuf$ = 12						; size = 4
_dwBufNum$ = 16						; size = 4
_dwTotalMsgSize$ = 20					; size = 4
_dwFlag$ = 24						; size = 4
_pdwMsgNum$ = 28					; size = 4
?PushMsg@CMsgQue@@QAEHKPAU_WSABUF@@KKKPAK@Z PROC	; CMsgQue::PushMsg
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\que.cpp
; Line 226
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 227
  00009	83 65 ec 00	 and	 DWORD PTR _pEntry$[ebp], 0
; Line 228
  0000d	83 65 f4 00	 and	 DWORD PTR _pDest$[ebp], 0
; Line 229
  00011	83 65 e8 00	 and	 DWORD PTR _dwSize$[ebp], 0
; Line 232
  00015	8b 45 10	 mov	 eax, DWORD PTR _dwBufNum$[ebp]
  00018	c1 e0 04	 shl	 eax, 4
  0001b	03 45 14	 add	 eax, DWORD PTR _dwTotalMsgSize$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR _size$[ebp], eax
; Line 235
  00021	68 00 00 00 00	 push	 OFFSET ?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A ; g_csWrite
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 237
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00038	89 45 ec	 mov	 DWORD PTR _pEntry$[ebp], eax
; Line 239
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00041	03 45 f0	 add	 eax, DWORD PTR _size$[ebp]
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004a	76 12		 jbe	 SHORT $LN4@PushMsg
; Line 241
  0004c	68 00 00 00 00	 push	 OFFSET ?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A ; g_csWrite
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 242
  00057	33 c0		 xor	 eax, eax
  00059	e9 a7 00 00 00	 jmp	 $LN5@PushMsg
$LN4@PushMsg:
; Line 245
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00064	03 45 f0	 add	 eax, DWORD PTR _size$[ebp]
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; Line 246
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	03 45 10	 add	 eax, DWORD PTR _dwBufNum$[ebp]
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	89 01		 mov	 DWORD PTR [ecx], eax
; Line 247
  0007a	8b 45 1c	 mov	 eax, DWORD PTR _pdwMsgNum$[ebp]
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00082	89 08		 mov	 DWORD PTR [eax], ecx
; Line 249
  00084	68 00 00 00 00	 push	 OFFSET ?g_csWrite@@3U_RTL_CRITICAL_SECTION@@A ; g_csWrite
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 251
  0008f	8b 45 ec	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00092	89 45 f4	 mov	 DWORD PTR _pDest$[ebp], eax
; Line 252
  00095	83 65 f8 00	 and	 DWORD PTR _i$1[ebp], 0
  00099	eb 07		 jmp	 SHORT $LN3@PushMsg
$LN2@PushMsg:
  0009b	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	40		 inc	 eax
  0009f	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@PushMsg:
  000a2	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  000a5	3b 45 10	 cmp	 eax, DWORD PTR _dwBufNum$[ebp]
  000a8	73 58		 jae	 SHORT $LN1@PushMsg
; Line 254
  000aa	8b 45 f4	 mov	 eax, DWORD PTR _pDest$[ebp]
  000ad	c7 40 04 10 00
	00 00		 mov	 DWORD PTR [eax+4], 16	; 00000010H
; Line 255
  000b4	8b 45 f4	 mov	 eax, DWORD PTR _pDest$[ebp]
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _dwHeader$[ebp]
  000ba	89 08		 mov	 DWORD PTR [eax], ecx
; Line 256
  000bc	8b 45 f4	 mov	 eax, DWORD PTR _pDest$[ebp]
  000bf	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  000c2	8b 55 0c	 mov	 edx, DWORD PTR _pBuf$[ebp]
  000c5	8b 0c ca	 mov	 ecx, DWORD PTR [edx+ecx*8]
  000c8	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; Line 257
  000cb	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  000d1	ff 34 c1	 push	 DWORD PTR [ecx+eax*8]
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  000da	ff 74 c1 04	 push	 DWORD PTR [ecx+eax*8+4]
  000de	8b 45 f4	 mov	 eax, DWORD PTR _pDest$[ebp]
  000e1	83 c0 10	 add	 eax, 16			; 00000010H
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _memcpy
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 258
  000ed	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  000f0	8b 4d 0c	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  000f3	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
  000f6	8b 4d f4	 mov	 ecx, DWORD PTR _pDest$[ebp]
  000f9	8d 44 01 10	 lea	 eax, DWORD PTR [ecx+eax+16]
  000fd	89 45 f4	 mov	 DWORD PTR _pDest$[ebp], eax
; Line 259
  00100	eb 99		 jmp	 SHORT $LN2@PushMsg
$LN1@PushMsg:
; Line 260
  00102	33 c0		 xor	 eax, eax
  00104	40		 inc	 eax
$LN5@PushMsg:
; Line 261
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 18 00	 ret	 24			; 00000018H
?PushMsg@CMsgQue@@QAEHKPAU_WSABUF@@KKKPAK@Z ENDP	; CMsgQue::PushMsg
_TEXT	ENDS
END
