; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\overlapped_send.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Initialize@COverlappedSend@@QAEXXZ		; COverlappedSend::Initialize
PUBLIC	?AllocBuffer@COverlappedSend@@QAEHK@Z		; COverlappedSend::AllocBuffer
PUBLIC	?SendBuffer@COverlappedSend@@QAEHXZ		; COverlappedSend::SendBuffer
PUBLIC	?Release@COverlappedSend@@QAEXXZ		; COverlappedSend::Release
PUBLIC	??0COverlappedSend@@QAE@XZ			; COverlappedSend::COverlappedSend
PUBLIC	??1COverlappedSend@@QAE@XZ			; COverlappedSend::~COverlappedSend
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__WSASend@28:PROC
EXTRN	?Alloc@CDynamicMemoryContainer@@QAEPADXZ:PROC	; CDynamicMemoryContainer::Alloc
EXTRN	?Free@CDynamicMemoryContainer@@QAEXPAD@Z:PROC	; CDynamicMemoryContainer::Free
EXTRN	?InitializeMemory@CWriteMemoryHandle@@QAEXXZ:PROC ; CWriteMemoryHandle::InitializeMemory
EXTRN	??0CWriteMemoryHandle@@QAE@XZ:PROC		; CWriteMemoryHandle::CWriteMemoryHandle
EXTRN	??0COverlapped@@QAE@XZ:PROC			; COverlapped::COverlapped
EXTRN	??1COverlapped@@QAE@XZ:PROC			; COverlapped::~COverlapped
EXTRN	?PostDisconnectEvent@@YAXK@Z:PROC		; PostDisconnectEvent
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
xdata$x	SEGMENT
__unwindtable$??1COverlappedSend@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COverlappedSend@@QAE@XZ$0
__unwindtable$??0COverlappedSend@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COverlappedSend@@QAE@XZ$0
__ehfuncinfo$??1COverlappedSend@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1COverlappedSend@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0COverlappedSend@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0COverlappedSend@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COverlappedSend@@QAE@XZ PROC				; COverlappedSend::~COverlappedSend
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 197
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1COverlappedSend@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
; Line 198
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?Release@COverlappedSend@@QAEXXZ ; COverlappedSend::Release
; Line 200
  00032	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1COverlappedSend@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
__ehhandler$??1COverlappedSend@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1COverlappedSend@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1COverlappedSend@@QAE@XZ ENDP				; COverlappedSend::~COverlappedSend
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COverlappedSend@@QAE@XZ PROC				; COverlappedSend::COverlappedSend
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 8
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0COverlappedSend@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0COverlapped@@QAE@XZ	; COverlapped::COverlapped
  0002e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 30	 add	 ecx, 48			; 00000030H
  00038	e8 00 00 00 00	 call	 ??0CWriteMemoryHandle@@QAE@XZ ; CWriteMemoryHandle::CWriteMemoryHandle
; Line 9
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?Initialize@COverlappedSend@@QAEXXZ ; COverlappedSend::Initialize
; Line 10
  00045	68 e8 03 00 00	 push	 1000			; 000003e8H
  0004a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c0 50	 add	 eax, 80			; 00000050H
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8
; Line 11
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0COverlappedSend@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
__ehhandler$??0COverlappedSend@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0COverlappedSend@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0COverlappedSend@@QAE@XZ ENDP				; COverlappedSend::COverlappedSend
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?Release@COverlappedSend@@QAEXXZ PROC			; COverlappedSend::Release
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 191
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 17
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 73
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00018	8b 40 68	 mov	 eax, DWORD PTR [eax+104]
  0001b	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 192
  0001e	ff 75 f8	 push	 DWORD PTR $T2[ebp]
  00021	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00024	e8 00 00 00 00	 call	 ?Free@CDynamicMemoryContainer@@QAEXPAD@Z ; CDynamicMemoryContainer::Free
; Line 193
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 c0 50	 add	 eax, 80			; 00000050H
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; Line 194
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?Release@COverlappedSend@@QAEXXZ ENDP			; COverlappedSend::Release
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_count$ = -9616						; size = 4
_this$ = -9612						; size = 4
_result$ = -9608					; size = 4
_wsabuf$ = -9604					; size = 9600
__$ArrayPad$ = -4					; size = 4
?SendBuffer@COverlappedSend@@QAEHXZ PROC		; COverlappedSend::SendBuffer
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 50
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 90 25 00 00	 mov	 eax, 9616		; 00002590H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 8d 74 da ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
; Line 89
  00020	83 a5 78 da ff
	ff 00		 and	 DWORD PTR _result$[ebp], 0
; Line 90
  00027	83 a5 70 da ff
	ff 00		 and	 DWORD PTR _count$[ebp], 0
; Line 93
  0002e	8b 9d 74 da ff
	ff		 mov	 ebx, DWORD PTR _this$[ebp]
; Line 94
  00034	0f 6e 43 1c	 movd	 mm0, DWORD PTR [ebx+28]
; Line 95
  00038	0f 6e cb	 movd	 mm1, ebx
; Line 97
  0003b	8b c3		 mov	 eax, ebx
; Line 98
  0003d	83 c0 18	 add	 eax, 24			; 00000018H
; Line 99
  00040	0f 6e d0	 movd	 mm2, eax
; Line 101
  00043	c7 43 14 01 00
	00 00		 mov	 DWORD PTR [ebx+20], 1
; Line 102
  0004a	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
; Line 104
  0004d	83 c3 30	 add	 ebx, 48			; 00000030H
; Line 106
  00050	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
; Line 107
  00053	3b c8		 cmp	 ecx, eax
; Line 108
  00055	76 02		 jbe	 SHORT $lb_start$9
; Line 110
  00057	8b c8		 mov	 ecx, eax
$lb_start$9:
; Line 114
  00059	8b 5b 08	 mov	 ebx, DWORD PTR [ebx+8]
; Line 115
  0005c	8d bd 7c da ff
	ff		 lea	 edi, DWORD PTR _wsabuf$[ebp]
; Line 116
  00062	0f 6e df	 movd	 mm3, edi
; Line 117
  00065	33 d2		 xor	 edx, edx
$lb_loop$10:
; Line 119
  00067	0f b6 43 0a	 movzx	 eax, BYTE PTR [ebx+10]
; Line 120
  0006b	8b f3		 mov	 esi, ebx
; Line 121
  0006d	83 c6 0c	 add	 esi, 12			; 0000000cH
; Line 122
  00070	03 f0		 add	 esi, eax
; Line 124
  00072	89 77 04	 mov	 DWORD PTR [edi+4], esi
; Line 125
  00075	0f b6 43 09	 movzx	 eax, BYTE PTR [ebx+9]
; Line 126
  00079	89 07		 mov	 DWORD PTR [edi], eax
; Line 128
  0007b	42		 inc	 edx
; Line 130
  0007c	83 c7 08	 add	 edi, 8
; Line 131
  0007f	2b c8		 sub	 ecx, eax
; Line 132
  00081	76 04		 jbe	 SHORT $lb_end$11
; Line 134
  00083	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; Line 135
  00085	eb e0		 jmp	 SHORT $lb_loop$10
$lb_end$11:
; Line 140
  00087	0f 7e c0	 movd	 eax, mm0
; Line 141
  0008a	0f 7e ce	 movd	 esi, mm1
; Line 142
  0008d	0f 7e d1	 movd	 ecx, mm2
; Line 143
  00090	0f 7e db	 movd	 ebx, mm3
; Line 144
  00093	0f 77		 emms
; Line 147
  00095	6a 00		 push	 0
; Line 148
  00097	56		 push	 esi
; Line 149
  00098	6a 00		 push	 0
; Line 150
  0009a	51		 push	 ecx
; Line 151
  0009b	52		 push	 edx
; Line 152
  0009c	53		 push	 ebx
; Line 153
  0009d	50		 push	 eax
; Line 155
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSASend@28
; Line 157
  000a4	89 85 78 da ff
	ff		 mov	 DWORD PTR _result$[ebp], eax
; Line 170
  000aa	83 bd 78 da ff
	ff ff		 cmp	 DWORD PTR _result$[ebp], -1
  000b1	74 04		 je	 SHORT $LN6@SendBuffer
; Line 171
  000b3	eb 41		 jmp	 SHORT $seg_true$12
  000b5	eb 3f		 jmp	 SHORT $seg_true$12
$LN6@SendBuffer:
; Line 173
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  000bd	89 85 78 da ff
	ff		 mov	 DWORD PTR _result$[ebp], eax
; Line 175
  000c3	81 bd 78 da ff
	ff e5 03 00 00	 cmp	 DWORD PTR _result$[ebp], 997 ; 000003e5H
  000cd	75 04		 jne	 SHORT $LN4@SendBuffer
; Line 176
  000cf	eb 25		 jmp	 SHORT $seg_true$12
  000d1	eb 23		 jmp	 SHORT $seg_true$12
$LN4@SendBuffer:
; Line 178
  000d3	81 bd 78 da ff
	ff 33 27 00 00	 cmp	 DWORD PTR _result$[ebp], 10035 ; 00002733H
  000dd	75 04		 jne	 SHORT $LN2@SendBuffer
; Line 179
  000df	eb 11		 jmp	 SHORT $seg_false$13
  000e1	eb 0f		 jmp	 SHORT $seg_false$13
$LN2@SendBuffer:
; Line 181
  000e3	8b 85 74 da ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  000e9	ff 70 2c	 push	 DWORD PTR [eax+44]
  000ec	e8 00 00 00 00	 call	 ?PostDisconnectEvent@@YAXK@Z ; PostDisconnectEvent
  000f1	59		 pop	 ecx
$seg_false$13:
; Line 184
  000f2	33 c0		 xor	 eax, eax
  000f4	eb 03		 jmp	 SHORT $LN7@SendBuffer
$seg_true$12:
; Line 187
  000f6	33 c0		 xor	 eax, eax
  000f8	40		 inc	 eax
$LN7@SendBuffer:
; Line 189
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ff	33 cd		 xor	 ecx, ebp
  00101	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?SendBuffer@COverlappedSend@@QAEHXZ ENDP		; COverlappedSend::SendBuffer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_pMemory$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?AllocBuffer@COverlappedSend@@QAEHK@Z PROC		; COverlappedSend::AllocBuffer
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 26
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 27
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000f	c1 e0 06	 shl	 eax, 6
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 27
  00012	85 c0		 test	 eax, eax
  00014	74 10		 je	 SHORT $LN2@AllocBuffe
; Line 29
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 30	 add	 ecx, 48			; 00000030H
  0001c	e8 00 00 00 00	 call	 ?InitializeMemory@CWriteMemoryHandle@@QAEXXZ ; CWriteMemoryHandle::InitializeMemory
; Line 30
  00021	33 c0		 xor	 eax, eax
  00023	40		 inc	 eax
  00024	eb 5b		 jmp	 SHORT $LN3@AllocBuffe
$LN2@AllocBuffe:
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 73
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0002c	8b 40 68	 mov	 eax, DWORD PTR [eax+104]
  0002f	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 33
  00032	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00035	e8 00 00 00 00	 call	 ?Alloc@CDynamicMemoryContainer@@QAEPADXZ ; CDynamicMemoryContainer::Alloc
  0003a	89 45 f4	 mov	 DWORD PTR _pMemory$[ebp], eax
; Line 34
  0003d	83 7d f4 00	 cmp	 DWORD PTR _pMemory$[ebp], 0
  00041	75 04		 jne	 SHORT $LN1@AllocBuffe
; Line 35
  00043	33 c0		 xor	 eax, eax
  00045	eb 3a		 jmp	 SHORT $LN3@AllocBuffe
$LN1@AllocBuffe:
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 73
  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0004d	8b 40 68	 mov	 eax, DWORD PTR [eax+104]
  00050	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\dynamic_memory.h
; Line 31
  00053	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00056	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00059	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 37
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 c0 30	 add	 eax, 48			; 00000030H
  00062	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 20
  00065	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 4d f4	 mov	 ecx, DWORD PTR _pMemory$[ebp]
  0006b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; Line 21
  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  00074	89 08		 mov	 DWORD PTR [eax], ecx
; Line 22
  00076	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?InitializeMemory@CWriteMemoryHandle@@QAEXXZ ; CWriteMemoryHandle::InitializeMemory
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 39
  0007e	33 c0		 xor	 eax, eax
  00080	40		 inc	 eax
$LN3@AllocBuffe:
; Line 40
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?AllocBuffer@COverlappedSend@@QAEHK@Z ENDP		; COverlappedSend::AllocBuffer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Initialize@COverlappedSend@@QAEXXZ PROC		; COverlappedSend::Initialize
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.cpp
; Line 14
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 17
  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 28 00	 and	 DWORD PTR [eax+40], 0
; Line 18
  0000f	33 c0		 xor	 eax, eax
  00011	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00014	ab		 stosd
  00015	ab		 stosd
  00016	ab		 stosd
  00017	ab		 stosd
  00018	ab		 stosd
; Line 19
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 48 1c ff	 or	 DWORD PTR [eax+28], -1
; Line 20
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 14 03 00
	00 00		 mov	 DWORD PTR [eax+20], 3
; Line 21
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 60 24 00	 and	 DWORD PTR [eax+36], 0
; Line 22
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 60 2c 00	 and	 DWORD PTR [eax+44], 0
; Line 23
  00038	5f		 pop	 edi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?Initialize@COverlappedSend@@QAEXXZ ENDP		; COverlappedSend::Initialize
_TEXT	ENDS
END
