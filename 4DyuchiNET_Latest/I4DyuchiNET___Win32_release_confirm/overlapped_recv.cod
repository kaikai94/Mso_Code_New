; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\overlapped_recv.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Initialize@COverlappedRecv@@QAEXXZ		; COverlappedRecv::Initialize
PUBLIC	?AllocBuffer@COverlappedRecv@@QAEHK@Z		; COverlappedRecv::AllocBuffer
PUBLIC	?Release@COverlappedRecv@@QAEXXZ		; COverlappedRecv::Release
PUBLIC	?PrepareRead@COverlappedRecv@@QAEHXZ		; COverlappedRecv::PrepareRead
PUBLIC	??0COverlappedRecv@@QAE@XZ			; COverlappedRecv::COverlappedRecv
PUBLIC	??1COverlappedRecv@@QAE@XZ			; COverlappedRecv::~COverlappedRecv
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__WSARecv@28:PROC
EXTRN	?Alloc@CDynamicMemoryContainer@@QAEPADXZ:PROC	; CDynamicMemoryContainer::Alloc
EXTRN	?Free@CDynamicMemoryContainer@@QAEXPAD@Z:PROC	; CDynamicMemoryContainer::Free
EXTRN	?InitializeMemory@CReadMemoryHandle@@QAEXXZ:PROC ; CReadMemoryHandle::InitializeMemory
EXTRN	??0CReadMemoryHandle@@QAE@XZ:PROC		; CReadMemoryHandle::CReadMemoryHandle
EXTRN	??1CReadMemoryHandle@@QAE@XZ:PROC		; CReadMemoryHandle::~CReadMemoryHandle
EXTRN	??0COverlapped@@QAE@XZ:PROC			; COverlapped::COverlapped
EXTRN	??1COverlapped@@QAE@XZ:PROC			; COverlapped::~COverlapped
EXTRN	?PostDisconnectEvent@@YAXK@Z:PROC		; PostDisconnectEvent
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
xdata$x	SEGMENT
__unwindtable$??1COverlappedRecv@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COverlappedRecv@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COverlappedRecv@@QAE@XZ$1
__unwindtable$??0COverlappedRecv@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COverlappedRecv@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COverlappedRecv@@QAE@XZ$1
__ehfuncinfo$??1COverlappedRecv@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COverlappedRecv@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0COverlappedRecv@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COverlappedRecv@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COverlappedRecv@@QAE@XZ PROC				; COverlappedRecv::~COverlappedRecv
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 73
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1COverlappedRecv@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; Line 74
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?Release@COverlappedRecv@@QAEXXZ ; COverlappedRecv::Release
; Line 76
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 30	 add	 ecx, 48			; 00000030H
  0003f	e8 00 00 00 00	 call	 ??1CReadMemoryHandle@@QAE@XZ ; CReadMemoryHandle::~CReadMemoryHandle
  00044	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1COverlappedRecv@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
__unwindfunclet$??1COverlappedRecv@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 30	 add	 ecx, 48			; 00000030H
  0000e	e9 00 00 00 00	 jmp	 ??1CReadMemoryHandle@@QAE@XZ ; CReadMemoryHandle::~CReadMemoryHandle
__ehhandler$??1COverlappedRecv@@QAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1COverlappedRecv@@QAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1COverlappedRecv@@QAE@XZ ENDP				; COverlappedRecv::~COverlappedRecv
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COverlappedRecv@@QAE@XZ PROC				; COverlappedRecv::COverlappedRecv
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 6
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0COverlappedRecv@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0COverlapped@@QAE@XZ	; COverlapped::COverlapped
  0002e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 30	 add	 ecx, 48			; 00000030H
  00038	e8 00 00 00 00	 call	 ??0CReadMemoryHandle@@QAE@XZ ; CReadMemoryHandle::CReadMemoryHandle
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; Line 7
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?Initialize@COverlappedRecv@@QAEXXZ ; COverlappedRecv::Initialize
; Line 8
  00049	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0COverlappedRecv@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1COverlapped@@QAE@XZ	; COverlapped::~COverlapped
__unwindfunclet$??0COverlappedRecv@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 30	 add	 ecx, 48			; 00000030H
  0000e	e9 00 00 00 00	 jmp	 ??1CReadMemoryHandle@@QAE@XZ ; CReadMemoryHandle::~CReadMemoryHandle
__ehhandler$??0COverlappedRecv@@QAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0COverlappedRecv@@QAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0COverlappedRecv@@QAE@XZ ENDP				; COverlappedRecv::COverlappedRecv
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
?PrepareRead@COverlappedRecv@@QAEHXZ PROC		; COverlappedRecv::PrepareRead
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 42
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 72
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0000f	89 45 f4	 mov	 DWORD PTR $T4[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 45
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d f4	 mov	 ecx, DWORD PTR $T4[ebp]
  00018	89 48 50	 mov	 DWORD PTR [eax+80], ecx
; File e:\github\mso_code\4dyuchinet_latest\read_memory_handle.h
; Line 43
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00021	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 46
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  0002a	89 48 54	 mov	 DWORD PTR [eax+84], ecx
; File e:\github\mso_code\4dyuchinet_latest\read_memory_handle.h
; Line 41
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00033	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 48
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  0003c	3b 45 ec	 cmp	 eax, DWORD PTR $T2[ebp]
  0003f	76 12		 jbe	 SHORT $LN3@PrepareRea
; File e:\github\mso_code\4dyuchinet_latest\read_memory_handle.h
; Line 41
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00047	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 49
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  00050	89 48 50	 mov	 DWORD PTR [eax+80], ecx
$LN3@PrepareRea:
; Line 53
  00053	6a 00		 push	 0
  00055	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 c0 28	 add	 eax, 40			; 00000028H
  0005e	50		 push	 eax
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	83 c0 18	 add	 eax, 24			; 00000018H
  00065	50		 push	 eax
  00066	6a 01		 push	 1
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	83 c0 50	 add	 eax, 80			; 00000050H
  0006e	50		 push	 eax
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	ff 70 1c	 push	 DWORD PTR [eax+28]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSARecv@28
  0007b	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax
; Line 55
  0007e	83 7d f8 ff	 cmp	 DWORD PTR _result$[ebp], -1
  00082	74 05		 je	 SHORT $LN2@PrepareRea
; Line 56
  00084	33 c0		 xor	 eax, eax
  00086	40		 inc	 eax
  00087	eb 25		 jmp	 SHORT $LN4@PrepareRea
$LN2@PrepareRea:
; Line 58
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0008f	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax
; Line 59
  00092	81 7d f8 e5 03
	00 00		 cmp	 DWORD PTR _result$[ebp], 997 ; 000003e5H
  00099	75 05		 jne	 SHORT $LN1@PrepareRea
; Line 60
  0009b	33 c0		 xor	 eax, eax
  0009d	40		 inc	 eax
  0009e	eb 0e		 jmp	 SHORT $LN4@PrepareRea
$LN1@PrepareRea:
; Line 62
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	ff 70 2c	 push	 DWORD PTR [eax+44]
  000a6	e8 00 00 00 00	 call	 ?PostDisconnectEvent@@YAXK@Z ; PostDisconnectEvent
  000ab	59		 pop	 ecx
; Line 64
  000ac	33 c0		 xor	 eax, eax
$LN4@PrepareRea:
; Line 65
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
?PrepareRead@COverlappedRecv@@QAEHXZ ENDP		; COverlappedRecv::PrepareRead
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?Release@COverlappedRecv@@QAEXXZ PROC			; COverlappedRecv::Release
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 67
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File e:\github\mso_code\4dyuchinet_latest\read_memory_handle.h
; Line 39
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 74
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00018	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  0001b	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 69
  0001e	ff 75 f8	 push	 DWORD PTR $T2[ebp]
  00021	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00024	e8 00 00 00 00	 call	 ?Free@CDynamicMemoryContainer@@QAEXPAD@Z ; CDynamicMemoryContainer::Free
; Line 71
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?Release@COverlappedRecv@@QAEXXZ ENDP			; COverlappedRecv::Release
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
_pMemory$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?AllocBuffer@COverlappedRecv@@QAEHK@Z PROC		; COverlappedRecv::AllocBuffer
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 21
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File e:\github\mso_code\4dyuchinet_latest\read_memory_handle.h
; Line 40
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  0000f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 25
  00012	83 7d f0 00	 cmp	 DWORD PTR $T4[ebp], 0
  00016	74 10		 je	 SHORT $LN2@AllocBuffe
; Line 27
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 30	 add	 ecx, 48			; 00000030H
  0001e	e8 00 00 00 00	 call	 ?InitializeMemory@CReadMemoryHandle@@QAEXXZ ; CReadMemoryHandle::InitializeMemory
; Line 28
  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	eb 5b		 jmp	 SHORT $LN3@AllocBuffe
$LN2@AllocBuffe:
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 74
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0002e	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  00031	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 31
  00034	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00037	e8 00 00 00 00	 call	 ?Alloc@CDynamicMemoryContainer@@QAEPADXZ ; CDynamicMemoryContainer::Alloc
  0003c	89 45 f4	 mov	 DWORD PTR _pMemory$[ebp], eax
; Line 33
  0003f	83 7d f4 00	 cmp	 DWORD PTR _pMemory$[ebp], 0
  00043	75 04		 jne	 SHORT $LN1@AllocBuffe
; Line 34
  00045	33 c0		 xor	 eax, eax
  00047	eb 3a		 jmp	 SHORT $LN3@AllocBuffe
$LN1@AllocBuffe:
; File e:\github\mso_code\4dyuchinet_latest\network.h
; Line 74
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0004f	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  00052	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\dynamic_memory.h
; Line 30
  00055	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00058	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0005b	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 36
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	83 c0 30	 add	 eax, 48			; 00000030H
  00064	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\read_memory_handle.h
; Line 34
  00067	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR _pMemory$[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx
; Line 35
  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 4d e4	 mov	 ecx, DWORD PTR $T1[ebp]
  00075	89 48 18	 mov	 DWORD PTR [eax+24], ecx
; Line 36
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?InitializeMemory@CReadMemoryHandle@@QAEXXZ ; CReadMemoryHandle::InitializeMemory
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 38
  00080	33 c0		 xor	 eax, eax
  00082	40		 inc	 eax
$LN3@AllocBuffe:
; Line 39
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?AllocBuffer@COverlappedRecv@@QAEHK@Z ENDP		; COverlappedRecv::AllocBuffer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Initialize@COverlappedRecv@@QAEXXZ PROC		; COverlappedRecv::Initialize
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped_recv.cpp
; Line 10
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 13
  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 28 00	 and	 DWORD PTR [eax+40], 0
; Line 14
  0000f	33 c0		 xor	 eax, eax
  00011	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00014	ab		 stosd
  00015	ab		 stosd
  00016	ab		 stosd
  00017	ab		 stosd
  00018	ab		 stosd
; Line 15
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 48 1c ff	 or	 DWORD PTR [eax+28], -1
; Line 16
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 14 02 00
	00 00		 mov	 DWORD PTR [eax+20], 2
; Line 17
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 60 24 00	 and	 DWORD PTR [eax+36], 0
; Line 18
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 60 2c 00	 and	 DWORD PTR [eax+44], 0
; Line 19
  00038	5f		 pop	 edi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?Initialize@COverlappedRecv@@QAEXXZ ENDP		; COverlappedRecv::Initialize
_TEXT	ENDS
END
