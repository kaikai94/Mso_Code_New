; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\connection.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG91480 DB	'Send Que Overflow I:%d', 00H
	ORG $+1
$SG91495 DB	'Send Que Overflow I:%d', 00H
	ORG $+1
$SG91515 DB	'Send Que Overflow I:%d', 00H
	ORG $+1
$SG91538 DB	'Send Que Overflow I:%d', 00H
CONST	ENDS
PUBLIC	?CloseSocket@CConnection@@QAEXXZ		; CConnection::CloseSocket
PUBLIC	?Release@CConnection@@QAEXXZ			; CConnection::Release
PUBLIC	?GetAddress@CConnection@@QAEHPADPAG@Z		; CConnection::GetAddress
PUBLIC	?Send@CConnection@@QAEHPADKK@Z			; CConnection::Send
PUBLIC	?Send@CConnection@@QAEHPADK@Z			; CConnection::Send
PUBLIC	?Send@CConnection@@QAEHPAU_WSABUF@@K@Z		; CConnection::Send
PUBLIC	?Send@CConnection@@QAEHPAUPACKET_LIST@@@Z	; CConnection::Send
PUBLIC	?Initialize@CConnection@@QAEHIKHH@Z		; CConnection::Initialize
PUBLIC	??0CConnection@@QAE@XZ				; CConnection::CConnection
PUBLIC	??1CConnection@@QAE@XZ				; CConnection::~CConnection
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__ntohs@4:PROC
EXTRN	__imp__setsockopt@20:PROC
EXTRN	?Push@CWriteMemoryHandle@@QAEHPADK@Z:PROC	; CWriteMemoryHandle::Push
EXTRN	?Initialize@COverlappedRecv@@QAEXXZ:PROC	; COverlappedRecv::Initialize
EXTRN	?AllocBuffer@COverlappedRecv@@QAEHK@Z:PROC	; COverlappedRecv::AllocBuffer
EXTRN	??0COverlappedRecv@@QAE@XZ:PROC			; COverlappedRecv::COverlappedRecv
EXTRN	??1COverlappedRecv@@QAE@XZ:PROC			; COverlappedRecv::~COverlappedRecv
EXTRN	?Initialize@COverlappedSend@@QAEXXZ:PROC	; COverlappedSend::Initialize
EXTRN	?AllocBuffer@COverlappedSend@@QAEHK@Z:PROC	; COverlappedSend::AllocBuffer
EXTRN	?SendBuffer@COverlappedSend@@QAEHXZ:PROC	; COverlappedSend::SendBuffer
EXTRN	??0COverlappedSend@@QAE@XZ:PROC			; COverlappedSend::COverlappedSend
EXTRN	??1COverlappedSend@@QAE@XZ:PROC			; COverlappedSend::~COverlappedSend
EXTRN	?WriteLog@CLogManager@@QAEHPADK@Z:PROC		; CLogManager::WriteLog
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	?g_pICode@@3PAUICode@@A:DWORD			; g_pICode
EXTRN	?g_pLogManager@@3PAVCLogManager@@A:DWORD	; g_pLogManager
EXTRN	___security_cookie:DWORD
xdata$x	SEGMENT
__unwindtable$?Initialize@CConnection@@QAEHIKHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$1
__ehfuncinfo$?Initialize@CConnection@@QAEHIKHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Initialize@CConnection@@QAEHIKHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CConnection@@QAE@XZ PROC				; CConnection::~CConnection
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 241
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 243
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Release@CConnection@@QAEXXZ ; CConnection::Release
; Line 244
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CConnection@@QAE@XZ ENDP				; CConnection::~CConnection
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CConnection@@QAE@XZ PROC				; CConnection::CConnection
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 8
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 9
  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 20 00	 and	 DWORD PTR [eax], 0
; Line 10
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 04 00	 and	 DWORD PTR [eax+4], 0
; Line 11
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; Line 12
  0001c	33 c0		 xor	 eax, eax
  0001e	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00021	83 c7 0c	 add	 edi, 12			; 0000000cH
  00024	ab		 stosd
  00025	ab		 stosd
  00026	ab		 stosd
  00027	ab		 stosd
; Line 14
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 60 1c 00	 and	 DWORD PTR [eax+28], 0
; Line 15
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 60 20 00	 and	 DWORD PTR [eax+32], 0
; Line 16
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 60 24 00	 and	 DWORD PTR [eax+36], 0
; Line 17
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 60 28 00	 and	 DWORD PTR [eax+40], 0
; Line 19
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	5f		 pop	 edi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??0CConnection@@QAE@XZ ENDP				; CConnection::CConnection
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_iResult$ = -80						; size = 4
_this$ = -76						; size = 4
_this$ = -72						; size = 4
_this$ = -68						; size = 4
_this$ = -64						; size = 4
_pNet$ = -60						; size = 4
_this$ = -56						; size = 4
_pNet$ = -52						; size = 4
_this$ = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
_bSwitch$ = -36						; size = 4
tv131 = -32						; size = 4
$T4 = -28						; size = 4
tv87 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_size$ = 12						; size = 4
_max_recv_size$ = 16					; size = 4
_max_send_size$ = 20					; size = 4
?Initialize@CConnection@@QAEHIKHH@Z PROC		; CConnection::Initialize
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 22
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Initialize@CConnection@@QAEHIKHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; Line 24
  00029	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 20 00	 and	 DWORD PTR [eax], 0
; Line 25
  0002f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 60 24 00	 and	 DWORD PTR [eax+36], 0
; Line 28
  00036	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bSwitch$[ebp], 1
; Line 29
  0003d	6a 04		 push	 4
  0003f	8d 45 dc	 lea	 eax, DWORD PTR _bSwitch$[ebp]
  00042	50		 push	 eax
  00043	6a 01		 push	 1
  00045	6a 06		 push	 6
  00047	ff 75 08	 push	 DWORD PTR _s$[ebp]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20
  00050	89 45 b0	 mov	 DWORD PTR _iResult$[ebp], eax
; Line 34
  00053	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 60 04 00	 and	 DWORD PTR [eax+4], 0
; Line 35
  0005a	33 c0		 xor	 eax, eax
  0005c	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
  0005f	83 c7 0c	 add	 edi, 12			; 0000000cH
  00062	ab		 stosd
  00063	ab		 stosd
  00064	ab		 stosd
  00065	ab		 stosd
; Line 38
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0006d	75 3b		 jne	 SHORT $LN4@Initialize
; Line 39
  0006f	6a 58		 push	 88			; 00000058H
  00071	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00076	59		 pop	 ecx
  00077	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  0007a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	83 7d ec 00	 cmp	 DWORD PTR $T5[ebp], 0
  00082	74 0d		 je	 SHORT $LN7@Initialize
  00084	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp]
  00087	e8 00 00 00 00	 call	 ??0COverlappedRecv@@QAE@XZ ; COverlappedRecv::COverlappedRecv
  0008c	89 45 e8	 mov	 DWORD PTR tv87[ebp], eax
  0008f	eb 04		 jmp	 SHORT $LN8@Initialize
$LN7@Initialize:
  00091	83 65 e8 00	 and	 DWORD PTR tv87[ebp], 0
$LN8@Initialize:
  00095	8b 45 e8	 mov	 eax, DWORD PTR tv87[ebp]
  00098	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  0009b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
  000a5	89 48 20	 mov	 DWORD PTR [eax+32], ecx
; Line 40
  000a8	eb 0b		 jmp	 SHORT $LN3@Initialize
$LN4@Initialize:
; Line 41
  000aa	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000b0	e8 00 00 00 00	 call	 ?Initialize@COverlappedRecv@@QAEXXZ ; COverlappedRecv::Initialize
$LN3@Initialize:
; Line 43
  000b5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  000bc	75 3e		 jne	 SHORT $LN2@Initialize
; Line 44
  000be	6a 68		 push	 104			; 00000068H
  000c0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c5	59		 pop	 ecx
  000c6	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
  000c9	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000d0	83 7d e4 00	 cmp	 DWORD PTR $T4[ebp], 0
  000d4	74 0d		 je	 SHORT $LN9@Initialize
  000d6	8b 4d e4	 mov	 ecx, DWORD PTR $T4[ebp]
  000d9	e8 00 00 00 00	 call	 ??0COverlappedSend@@QAE@XZ ; COverlappedSend::COverlappedSend
  000de	89 45 e0	 mov	 DWORD PTR tv131[ebp], eax
  000e1	eb 04		 jmp	 SHORT $LN10@Initialize
$LN9@Initialize:
  000e3	83 65 e0 00	 and	 DWORD PTR tv131[ebp], 0
$LN10@Initialize:
  000e7	8b 45 e0	 mov	 eax, DWORD PTR tv131[ebp]
  000ea	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000ed	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp]
  000f7	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; Line 45
  000fa	eb 0b		 jmp	 SHORT $LN1@Initialize
$LN2@Initialize:
; Line 46
  000fc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00102	e8 00 00 00 00	 call	 ?Initialize@COverlappedSend@@QAEXXZ ; COverlappedSend::Initialize
$LN1@Initialize:
; Line 48
  00107	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0010d	89 45 cc	 mov	 DWORD PTR _pNet$[ebp], eax
  00110	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00116	89 45 d0	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 70
  00119	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	8b 4d cc	 mov	 ecx, DWORD PTR _pNet$[ebp]
  0011f	89 48 24	 mov	 DWORD PTR [eax+36], ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 49
  00122	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00125	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00128	89 45 c4	 mov	 DWORD PTR _pNet$[ebp], eax
  0012b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00131	89 45 c8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 70
  00134	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00137	8b 4d c4	 mov	 ecx, DWORD PTR _pNet$[ebp]
  0013a	89 48 24	 mov	 DWORD PTR [eax+36], ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 52
  0013d	ff 75 0c	 push	 DWORD PTR _size$[ebp]
  00140	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00143	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00146	e8 00 00 00 00	 call	 ?AllocBuffer@COverlappedRecv@@QAEHK@Z ; COverlappedRecv::AllocBuffer
; Line 53
  0014b	ff 75 0c	 push	 DWORD PTR _size$[ebp]
  0014e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00151	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00154	e8 00 00 00 00	 call	 ?AllocBuffer@COverlappedSend@@QAEHK@Z ; COverlappedSend::AllocBuffer
; Line 55
  00159	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0015f	89 45 c0	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 71
  00162	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00165	8b 4d 10	 mov	 ecx, DWORD PTR _max_recv_size$[ebp]
  00168	89 48 20	 mov	 DWORD PTR [eax+32], ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 56
  0016b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00171	89 45 bc	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 71
  00174	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00177	8b 4d 14	 mov	 ecx, DWORD PTR _max_send_size$[ebp]
  0017a	89 48 20	 mov	 DWORD PTR [eax+32], ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 58
  0017d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00180	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00183	89 45 b8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 78
  00186	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  00189	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018c	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 59
  0018f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00192	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00195	89 45 b4	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 78
  00198	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 73
  001a1	33 c0		 xor	 eax, eax
  001a3	40		 inc	 eax
; Line 75
  001a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ae	59		 pop	 ecx
  001af	5f		 pop	 edi
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$0:
  00000	ff 75 ec	 push	 DWORD PTR $T5[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$?Initialize@CConnection@@QAEHIKHH@Z$1:
  0000a	ff 75 e4	 push	 DWORD PTR $T4[ebp]
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	59		 pop	 ecx
  00013	c3		 ret	 0
__ehhandler$?Initialize@CConnection@@QAEHIKHH@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@CConnection@@QAEHIKHH@Z
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@CConnection@@QAEHIKHH@Z ENDP		; CConnection::Initialize
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -80						; size = 4
_this$ = -76						; size = 4
_this$ = -72						; size = 4
_dwLength$ = -68					; size = 4
_this$ = -64						; size = 4
_msg$ = -60						; size = 4
$T1 = -56						; size = 4
_result$ = -52						; size = 4
_dwSize$ = -48						; size = 4
_this$ = -44						; size = 4
_pCur$ = -40						; size = 4
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_pList$ = 8						; size = 4
?Send@CConnection@@QAEHPAUPACKET_LIST@@@Z PROC		; CConnection::Send
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 195
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx
; Line 198
  00013	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1
; Line 199
  0001a	83 65 d0 00	 and	 DWORD PTR _dwSize$[ebp], 0
; Line 200
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pList$[ebp]
  00021	89 45 d8	 mov	 DWORD PTR _pCur$[ebp], eax
$LN9@Send:
; Line 202
  00024	83 7d d8 00	 cmp	 DWORD PTR _pCur$[ebp], 0
  00028	74 17		 je	 SHORT $LN8@Send
; Line 204
  0002a	8b 45 d8	 mov	 eax, DWORD PTR _pCur$[ebp]
  0002d	8b 4d d0	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  00030	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00033	89 4d d0	 mov	 DWORD PTR _dwSize$[ebp], ecx
; Line 205
  00036	8b 45 d8	 mov	 eax, DWORD PTR _pCur$[ebp]
  00039	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003c	89 45 d8	 mov	 DWORD PTR _pCur$[ebp], eax
; Line 206
  0003f	eb e3		 jmp	 SHORT $LN9@Send
$LN8@Send:
; Line 208
  00041	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00047	89 45 b0	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  0004a	8b 45 b0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c0 50	 add	 eax, 80			; 00000050H
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  00057	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0005d	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00060	89 45 c8	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 210
  00063	8b 45 d0	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00066	40		 inc	 eax
  00067	40		 inc	 eax
  00068	39 45 c8	 cmp	 DWORD PTR $T1[ebp], eax
  0006b	77 46		 ja	 SHORT $LN7@Send
; Line 212
  0006d	83 65 cc 00	 and	 DWORD PTR _result$[ebp], 0
; Line 213
  00071	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, 0 ; g_pLogManager
  00078	74 32		 je	 SHORT $LN6@Send
; Line 215
  0007a	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	ff 70 08	 push	 DWORD PTR [eax+8]
  00080	68 00 00 00 00	 push	 OFFSET $SG91538
  00085	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 216
  00092	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0009c	50		 push	 eax
  0009d	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  000a0	50		 push	 eax
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  000a7	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
$LN6@Send:
; Line 218
  000ac	e9 80 00 00 00	 jmp	 $seg_return$26
  000b1	eb 7e		 jmp	 SHORT $seg_return$26
$LN7@Send:
; Line 221
  000b3	8b 45 08	 mov	 eax, DWORD PTR _pList$[ebp]
  000b6	89 45 d8	 mov	 DWORD PTR _pCur$[ebp], eax
; Line 222
  000b9	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000bf	89 45 b4	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000c2	6a 02		 push	 2
  000c4	8d 45 d0	 lea	 eax, DWORD PTR _dwSize$[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	83 c1 30	 add	 ecx, 48			; 00000030H
  000ce	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
$LN4@Send:
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 223
  000d3	83 7d d8 00	 cmp	 DWORD PTR _pCur$[ebp], 0
  000d7	74 36		 je	 SHORT $LN22@Send
; Line 225
  000d9	8b 45 d8	 mov	 eax, DWORD PTR _pCur$[ebp]
  000dc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000df	89 45 bc	 mov	 DWORD PTR _dwLength$[ebp], eax
  000e2	8b 45 d8	 mov	 eax, DWORD PTR _pCur$[ebp]
  000e5	8b 00		 mov	 eax, DWORD PTR [eax]
  000e7	89 45 c4	 mov	 DWORD PTR _msg$[ebp], eax
  000ea	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000f0	89 45 c0	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000f3	ff 75 bc	 push	 DWORD PTR _dwLength$[ebp]
  000f6	ff 75 c4	 push	 DWORD PTR _msg$[ebp]
  000f9	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	83 c1 30	 add	 ecx, 48			; 00000030H
  000ff	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 226
  00104	8b 45 d8	 mov	 eax, DWORD PTR _pCur$[ebp]
  00107	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0010a	89 45 d8	 mov	 DWORD PTR _pCur$[ebp], eax
; Line 227
  0010d	eb c4		 jmp	 SHORT $LN4@Send
$LN22@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  0010f	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00115	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00118	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 229
  0011d	83 f8 03	 cmp	 eax, 3
  00120	74 04		 je	 SHORT $LN2@Send
; Line 230
  00122	eb 0d		 jmp	 SHORT $seg_return$26
  00124	eb 0b		 jmp	 SHORT $seg_return$26
$LN2@Send:
; Line 232
  00126	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00129	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0012c	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$26:
; Line 236
  00131	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00137	89 45 b8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  0013a	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  0013d	83 c0 50	 add	 eax, 80			; 00000050H
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 237
  00147	8b 45 cc	 mov	 eax, DWORD PTR _result$[ebp]
; Line 239
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014d	33 cd		 xor	 ecx, ebp
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 04 00	 ret	 4
?Send@CConnection@@QAEHPAUPACKET_LIST@@@Z ENDP		; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -84						; size = 4
_this$ = -80						; size = 4
_this$ = -76						; size = 4
_dwLength$ = -72					; size = 4
_this$ = -68						; size = 4
_msg$ = -64						; size = 4
$T1 = -60						; size = 4
_result$ = -56						; size = 4
_dwSize$ = -52						; size = 4
_i$2 = -48						; size = 4
_i$3 = -44						; size = 4
_this$ = -40						; size = 4
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_pBuf$ = 8						; size = 4
_dwNum$ = 12						; size = 4
?Send@CConnection@@QAEHPAU_WSABUF@@K@Z PROC		; CConnection::Send
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 156
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 159
  00013	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1
; Line 160
  0001a	83 65 cc 00	 and	 DWORD PTR _dwSize$[ebp], 0
; Line 161
  0001e	83 65 d0 00	 and	 DWORD PTR _i$2[ebp], 0
  00022	eb 07		 jmp	 SHORT $LN11@Send
$LN10@Send:
  00024	8b 45 d0	 mov	 eax, DWORD PTR _i$2[ebp]
  00027	40		 inc	 eax
  00028	89 45 d0	 mov	 DWORD PTR _i$2[ebp], eax
$LN11@Send:
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _i$2[ebp]
  0002e	3b 45 0c	 cmp	 eax, DWORD PTR _dwNum$[ebp]
  00031	73 11		 jae	 SHORT $LN9@Send
; Line 162
  00033	8b 45 d0	 mov	 eax, DWORD PTR _i$2[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  00039	8b 55 cc	 mov	 edx, DWORD PTR _dwSize$[ebp]
  0003c	03 14 c1	 add	 edx, DWORD PTR [ecx+eax*8]
  0003f	89 55 cc	 mov	 DWORD PTR _dwSize$[ebp], edx
  00042	eb e0		 jmp	 SHORT $LN10@Send
$LN9@Send:
; Line 164
  00044	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0004a	89 45 ac	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  0004d	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  00050	83 c0 50	 add	 eax, 80			; 00000050H
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  0005a	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00063	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 166
  00066	8b 45 cc	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00069	40		 inc	 eax
  0006a	40		 inc	 eax
  0006b	39 45 c4	 cmp	 DWORD PTR $T1[ebp], eax
  0006e	77 49		 ja	 SHORT $LN8@Send
; Line 168
  00070	83 65 c8 00	 and	 DWORD PTR _result$[ebp], 0
; Line 169
  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, 0 ; g_pLogManager
  0007b	74 32		 je	 SHORT $LN7@Send
; Line 171
  0007d	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00080	ff 70 08	 push	 DWORD PTR [eax+8]
  00083	68 00 00 00 00	 push	 OFFSET $SG91515
  00088	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 172
  00095	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00098	50		 push	 eax
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0009f	50		 push	 eax
  000a0	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  000a3	50		 push	 eax
  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  000aa	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
$LN7@Send:
; Line 174
  000af	e9 8b 00 00 00	 jmp	 $seg_return$28
  000b4	e9 86 00 00 00	 jmp	 $seg_return$28
$LN8@Send:
; Line 177
  000b9	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000bf	89 45 b0	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000c2	6a 02		 push	 2
  000c4	8d 45 cc	 lea	 eax, DWORD PTR _dwSize$[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	83 c1 30	 add	 ecx, 48			; 00000030H
  000ce	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 178
  000d3	83 65 d4 00	 and	 DWORD PTR _i$3[ebp], 0
  000d7	eb 07		 jmp	 SHORT $LN5@Send
$LN4@Send:
  000d9	8b 45 d4	 mov	 eax, DWORD PTR _i$3[ebp]
  000dc	40		 inc	 eax
  000dd	89 45 d4	 mov	 DWORD PTR _i$3[ebp], eax
$LN5@Send:
  000e0	8b 45 d4	 mov	 eax, DWORD PTR _i$3[ebp]
  000e3	3b 45 0c	 cmp	 eax, DWORD PTR _dwNum$[ebp]
  000e6	73 35		 jae	 SHORT $LN24@Send
; Line 180
  000e8	8b 45 d4	 mov	 eax, DWORD PTR _i$3[ebp]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  000ee	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
  000f1	89 45 b8	 mov	 DWORD PTR _dwLength$[ebp], eax
  000f4	8b 45 d4	 mov	 eax, DWORD PTR _i$3[ebp]
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  000fa	8b 44 c1 04	 mov	 eax, DWORD PTR [ecx+eax*8+4]
  000fe	89 45 c0	 mov	 DWORD PTR _msg$[ebp], eax
  00101	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00104	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00107	89 45 bc	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  0010a	ff 75 b8	 push	 DWORD PTR _dwLength$[ebp]
  0010d	ff 75 c0	 push	 DWORD PTR _msg$[ebp]
  00110	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	83 c1 30	 add	 ecx, 48			; 00000030H
  00116	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 181
  0011b	eb bc		 jmp	 SHORT $LN4@Send
$LN24@Send:
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  0011d	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00120	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00123	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00126	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 183
  0012b	83 f8 03	 cmp	 eax, 3
  0012e	74 04		 je	 SHORT $LN2@Send
; Line 184
  00130	eb 0d		 jmp	 SHORT $seg_return$28
  00132	eb 0b		 jmp	 SHORT $seg_return$28
$LN2@Send:
; Line 186
  00134	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00137	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0013a	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$28:
; Line 190
  0013f	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00142	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00145	89 45 b4	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  00148	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	83 c0 50	 add	 eax, 80			; 00000050H
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 191
  00155	8b 45 c8	 mov	 eax, DWORD PTR _result$[ebp]
; Line 193
  00158	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015b	33 cd		 xor	 ecx, ebp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c2 08 00	 ret	 8
?Send@CConnection@@QAEHPAU_WSABUF@@K@Z ENDP		; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
$T1 = -68						; size = 4
_dwLength$ = -64					; size = 4
_this$ = -60						; size = 4
_this$ = -56						; size = 4
_this$ = -52						; size = 4
_this$ = -48						; size = 4
_result$ = -44						; size = 4
_this$ = -40						; size = 4
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
_length$ = 12						; size = 4
?Send@CConnection@@QAEHPADK@Z PROC			; CConnection::Send
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 124
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 127
  00013	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1
; Line 129
  0001a	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00020	89 45 c8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  00023	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 50	 add	 eax, 80			; 00000050H
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  00030	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00036	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00039	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 131
  0003c	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  0003f	40		 inc	 eax
  00040	40		 inc	 eax
  00041	39 45 bc	 cmp	 DWORD PTR $T1[ebp], eax
  00044	77 43		 ja	 SHORT $LN5@Send
; Line 133
  00046	83 65 d4 00	 and	 DWORD PTR _result$[ebp], 0
; Line 134
  0004a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, 0 ; g_pLogManager
  00051	74 32		 je	 SHORT $LN4@Send
; Line 136
  00053	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	ff 70 08	 push	 DWORD PTR [eax+8]
  00059	68 00 00 00 00	 push	 OFFSET $SG91495
  0005e	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 137
  0006b	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0006e	50		 push	 eax
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00075	50		 push	 eax
  00076	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  00079	50		 push	 eax
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  00080	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
$LN4@Send:
; Line 139
  00085	eb 5e		 jmp	 SHORT $seg_return$22
  00087	eb 5c		 jmp	 SHORT $seg_return$22
$LN5@Send:
; Line 142
  00089	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0008f	89 45 d0	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  00092	6a 02		 push	 2
  00094	8d 45 0c	 lea	 eax, DWORD PTR _length$[ebp]
  00097	50		 push	 eax
  00098	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	83 c1 30	 add	 ecx, 48			; 00000030H
  0009e	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 143
  000a3	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  000a6	89 45 c0	 mov	 DWORD PTR _dwLength$[ebp], eax
  000a9	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000af	89 45 cc	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000b2	ff 75 c0	 push	 DWORD PTR _dwLength$[ebp]
  000b5	ff 75 08	 push	 DWORD PTR _msg$[ebp]
  000b8	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	83 c1 30	 add	 ecx, 48			; 00000030H
  000be	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  000c3	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000c9	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  000cc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 145
  000d1	83 f8 03	 cmp	 eax, 3
  000d4	74 04		 je	 SHORT $LN2@Send
; Line 146
  000d6	eb 0d		 jmp	 SHORT $seg_return$22
  000d8	eb 0b		 jmp	 SHORT $seg_return$22
$LN2@Send:
; Line 148
  000da	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000e0	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$22:
; Line 152
  000e5	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000eb	89 45 c4	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  000ee	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	83 c0 50	 add	 eax, 80			; 00000050H
  000f4	50		 push	 eax
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 153
  000fb	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
; Line 154
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	33 cd		 xor	 ecx, ebp
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
?Send@CConnection@@QAEHPADK@Z ENDP			; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -84						; size = 4
_this$ = -80						; size = 4
_this$ = -76						; size = 4
_this$ = -72						; size = 4
_this$ = -68						; size = 4
_dwLength$ = -64					; size = 4
$T1 = -60						; size = 4
_checkbytes$ = -56					; size = 4
_result$ = -52						; size = 4
_total_len$ = -48					; size = 4
_checkbytes_len$ = -44					; size = 4
_this$ = -40						; size = 4
_txt$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
_length$ = 12						; size = 4
_flag$ = 16						; size = 4
?Send@CConnection@@QAEHPADKK@Z PROC			; CConnection::Send
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 80
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 82
  00013	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1
; Line 84
  0001a	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _checkbytes_len$[ebp], 1
; Line 87
  00021	83 7d 10 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00025	75 06		 jne	 SHORT $LN7@Send
; Line 88
  00027	83 65 c8 00	 and	 DWORD PTR _checkbytes$[ebp], 0
; Line 89
  0002b	eb 1e		 jmp	 SHORT $LN6@Send
$LN7@Send:
; Line 90
  0002d	ff 75 0c	 push	 DWORD PTR _length$[ebp]
  00030	ff 75 08	 push	 DWORD PTR _msg$[ebp]
  00033	8d 45 d4	 lea	 eax, DWORD PTR _checkbytes_len$[ebp]
  00036	50		 push	 eax
  00037	8d 45 c8	 lea	 eax, DWORD PTR _checkbytes$[ebp]
  0003a	50		 push	 eax
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pICode@@3PAUICode@@A ; g_pICode
  00040	8b 00		 mov	 eax, DWORD PTR [eax]
  00042	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pICode@@3PAUICode@@A ; g_pICode
  00048	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN6@Send:
; Line 92
  0004b	8b 45 d4	 mov	 eax, DWORD PTR _checkbytes_len$[ebp]
  0004e	03 45 0c	 add	 eax, DWORD PTR _length$[ebp]
  00051	89 45 d0	 mov	 DWORD PTR _total_len$[ebp], eax
; Line 94
  00054	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0005a	89 45 ac	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 16
  0005d	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  00060	83 c0 50	 add	 eax, 80			; 00000050H
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\write_memory_handle.h
; Line 25
  0006a	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00070	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00073	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 96
  00076	8b 45 d0	 mov	 eax, DWORD PTR _total_len$[ebp]
  00079	40		 inc	 eax
  0007a	40		 inc	 eax
  0007b	39 45 c4	 cmp	 DWORD PTR $T1[ebp], eax
  0007e	77 43		 ja	 SHORT $LN5@Send
; Line 98
  00080	83 65 cc 00	 and	 DWORD PTR _result$[ebp], 0
; Line 99
  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A, 0 ; g_pLogManager
  0008b	74 32		 je	 SHORT $LN4@Send
; Line 101
  0008d	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00090	ff 70 08	 push	 DWORD PTR [eax+8]
  00093	68 00 00 00 00	 push	 OFFSET $SG91480
  00098	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  0009b	50		 push	 eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 102
  000a5	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  000a8	50		 push	 eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000af	50		 push	 eax
  000b0	8d 45 dc	 lea	 eax, DWORD PTR _txt$[ebp]
  000b3	50		 push	 eax
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pLogManager@@3PAVCLogManager@@A ; g_pLogManager
  000ba	e8 00 00 00 00	 call	 ?WriteLog@CLogManager@@QAEHPADK@Z ; CLogManager::WriteLog
$LN4@Send:
; Line 104
  000bf	eb 79		 jmp	 SHORT $seg_return$26
  000c1	eb 77		 jmp	 SHORT $seg_return$26
$LN5@Send:
; Line 107
  000c3	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000c9	89 45 b0	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000cc	6a 02		 push	 2
  000ce	8d 45 d0	 lea	 eax, DWORD PTR _total_len$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d b0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	83 c1 30	 add	 ecx, 48			; 00000030H
  000d8	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 108
  000dd	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000e3	89 45 b8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  000e6	ff 75 0c	 push	 DWORD PTR _length$[ebp]
  000e9	ff 75 08	 push	 DWORD PTR _msg$[ebp]
  000ec	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	83 c1 30	 add	 ecx, 48			; 00000030H
  000f2	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 109
  000f7	8b 45 d4	 mov	 eax, DWORD PTR _checkbytes_len$[ebp]
  000fa	89 45 c0	 mov	 DWORD PTR _dwLength$[ebp], eax
  000fd	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00100	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00103	89 45 bc	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 19
  00106	ff 75 c0	 push	 DWORD PTR _dwLength$[ebp]
  00109	8d 45 c8	 lea	 eax, DWORD PTR _checkbytes$[ebp]
  0010c	50		 push	 eax
  0010d	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	83 c1 30	 add	 ecx, 48			; 00000030H
  00113	e8 00 00 00 00	 call	 ?Push@CWriteMemoryHandle@@QAEHPADK@Z ; CWriteMemoryHandle::Push
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 76
  00118	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0011e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00121	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 111
  00126	83 f8 03	 cmp	 eax, 3
  00129	74 04		 je	 SHORT $LN2@Send
; Line 112
  0012b	eb 0d		 jmp	 SHORT $seg_return$26
  0012d	eb 0b		 jmp	 SHORT $seg_return$26
$LN2@Send:
; Line 114
  0012f	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00132	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00135	e8 00 00 00 00	 call	 ?SendBuffer@COverlappedSend@@QAEHXZ ; COverlappedSend::SendBuffer
$seg_return$26:
; Line 119
  0013a	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0013d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00140	89 45 b4	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped_send.h
; Line 17
  00143	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  00146	83 c0 50	 add	 eax, 80			; 00000050H
  00149	50		 push	 eax
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 120
  00150	8b 45 cc	 mov	 eax, DWORD PTR _result$[ebp]
; Line 121
  00153	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00156	33 cd		 xor	 ecx, ebp
  00158	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c2 0c 00	 ret	 12			; 0000000cH
?Send@CConnection@@QAEHPADKK@Z ENDP			; CConnection::Send
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_bResult$ = -12						; size = 4
_this$ = -8						; size = 4
_paddr$ = -4						; size = 4
_pIP$ = 8						; size = 4
_pwport$ = 12						; size = 4
?GetAddress@CConnection@@QAEHPADPAG@Z PROC		; CConnection::GetAddress
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 261
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 262
  0000a	83 65 f4 00	 and	 DWORD PTR _bResult$[ebp], 0
; Line 263
  0000e	33 c0		 xor	 eax, eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _pwport$[ebp]
  00013	66 89 01	 mov	 WORD PTR [ecx], ax
; Line 264
  00016	33 c0		 xor	 eax, eax
  00018	8b 7d 08	 mov	 edi, DWORD PTR _pIP$[ebp]
  0001b	ab		 stosd
  0001c	ab		 stosd
  0001d	ab		 stosd
  0001e	66 ab		 stosw
  00020	aa		 stosb
; Line 266
  00021	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00024	ff 70 10	 push	 DWORD PTR [eax+16]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  0002d	89 45 fc	 mov	 DWORD PTR _paddr$[ebp], eax
; Line 267
  00030	83 7d fc 00	 cmp	 DWORD PTR _paddr$[ebp], 0
  00034	75 04		 jne	 SHORT $LN2@GetAddress
; Line 268
  00036	eb 36		 jmp	 SHORT $lb_return$5
  00038	eb 34		 jmp	 SHORT $lb_return$5
$LN2@GetAddress:
; Line 270
  0003a	ff 75 fc	 push	 DWORD PTR _paddr$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00043	40		 inc	 eax
  00044	50		 push	 eax
  00045	ff 75 fc	 push	 DWORD PTR _paddr$[ebp]
  00048	ff 75 08	 push	 DWORD PTR _pIP$[ebp]
  0004b	e8 00 00 00 00	 call	 _memcpy
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 271
  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	0f b7 40 0e	 movzx	 eax, WORD PTR [eax+14]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohs@4
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _pwport$[ebp]
  00064	66 89 01	 mov	 WORD PTR [ecx], ax
; Line 272
  00067	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1
$lb_return$5:
; Line 275
  0006e	8b 45 f4	 mov	 eax, DWORD PTR _bResult$[ebp]
; Line 277
  00071	5f		 pop	 edi
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?GetAddress@CConnection@@QAEHPADPAG@Z ENDP		; CConnection::GetAddress
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
tv80 = -28						; size = 4
$T1 = -24						; size = 4
tv71 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?Release@CConnection@@QAEXXZ PROC			; CConnection::Release
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 279
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 280
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00010	74 41		 je	 SHORT $LN2@Release
; Line 282
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00018	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  0001b	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
  00021	83 7d f8 00	 cmp	 DWORD PTR $T4[ebp], 0
  00025	74 21		 je	 SHORT $LN5@Release
  00027	8b 4d f8	 mov	 ecx, DWORD PTR $T4[ebp]
  0002a	e8 00 00 00 00	 call	 ??1COverlappedRecv@@QAE@XZ ; COverlappedRecv::~COverlappedRecv
  0002f	33 c0		 xor	 eax, eax
  00031	40		 inc	 eax
  00032	83 e0 01	 and	 eax, 1
  00035	74 09		 je	 SHORT $LN10@Release
  00037	ff 75 f8	 push	 DWORD PTR $T4[ebp]
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003f	59		 pop	 ecx
$LN10@Release:
  00040	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp]
  00043	89 45 ec	 mov	 DWORD PTR tv71[ebp], eax
  00046	eb 04		 jmp	 SHORT $LN6@Release
$LN5@Release:
  00048	83 65 ec 00	 and	 DWORD PTR tv71[ebp], 0
$LN6@Release:
; Line 283
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 60 20 00	 and	 DWORD PTR [eax+32], 0
$LN2@Release:
; Line 285
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0005a	74 41		 je	 SHORT $LN3@Release
; Line 287
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00062	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
  00065	8b 45 e8	 mov	 eax, DWORD PTR $T1[ebp]
  00068	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
  0006b	83 7d f4 00	 cmp	 DWORD PTR $T3[ebp], 0
  0006f	74 21		 je	 SHORT $LN7@Release
  00071	8b 4d f4	 mov	 ecx, DWORD PTR $T3[ebp]
  00074	e8 00 00 00 00	 call	 ??1COverlappedSend@@QAE@XZ ; COverlappedSend::~COverlappedSend
  00079	33 c0		 xor	 eax, eax
  0007b	40		 inc	 eax
  0007c	83 e0 01	 and	 eax, 1
  0007f	74 09		 je	 SHORT $LN13@Release
  00081	ff 75 f4	 push	 DWORD PTR $T3[ebp]
  00084	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00089	59		 pop	 ecx
$LN13@Release:
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]
  0008d	89 45 e4	 mov	 DWORD PTR tv80[ebp], eax
  00090	eb 04		 jmp	 SHORT $LN8@Release
$LN7@Release:
  00092	83 65 e4 00	 and	 DWORD PTR tv80[ebp], 0
$LN8@Release:
; Line 288
  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	83 60 1c 00	 and	 DWORD PTR [eax+28], 0
$LN3@Release:
; Line 290
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?Release@CConnection@@QAEXXZ ENDP			; CConnection::Release
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_this$ = -24						; size = 4
_this$ = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?CloseSocket@CConnection@@QAEXXZ PROC			; CConnection::CloseSocket
; _this$ = ecx
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 247
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 77
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0000f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00012	89 45 f8	 mov	 DWORD PTR $T3[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 251
  00015	83 7d f8 ff	 cmp	 DWORD PTR $T3[ebp], -1
  00019	74 47		 je	 SHORT $LN2@CloseSocke
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 77
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00021	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00024	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 251
  00027	83 7d f4 ff	 cmp	 DWORD PTR $T2[ebp], -1
  0002b	74 35		 je	 SHORT $LN2@CloseSocke
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 77
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00033	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00036	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 253
  00039	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
; Line 254
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00048	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 78
  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 48 1c ff	 or	 DWORD PTR [eax+28], -1
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 255
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00058	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File e:\github\mso_code\4dyuchinet_latest\overlapped.h
; Line 78
  0005b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	83 48 1c ff	 or	 DWORD PTR [eax+28], -1
$LN2@CloseSocke:
; File e:\github\mso_code\4dyuchinet_latest\connection.cpp
; Line 259
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?CloseSocket@CConnection@@QAEXXZ ENDP			; CConnection::CloseSocket
_TEXT	ENDS
END
