; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	E:\GitHub\Mso_Code\4DyuchiNET_Latest\timer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_dwTimerNum@@3KA				; g_dwTimerNum
PUBLIC	?TimerHandle@@3PAUTIMER_HANDLE@@A		; TimerHandle
PUBLIC	?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A		; g_csTimer
_BSS	SEGMENT
?g_dwTimerNum@@3KA DD 01H DUP (?)			; g_dwTimerNum
?TimerHandle@@3PAUTIMER_HANDLE@@A DB 0480H DUP (?)	; TimerHandle
?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?)	; g_csTimer
_BSS	ENDS
CONST	SEGMENT
$SG91163 DB	'Error', 00H
	ORG $+2
$SG91164 DB	'Timer Index already used', 00H
CONST	ENDS
PUBLIC	?InitializeTimer@@YAXXZ				; InitializeTimer
PUBLIC	?AddTimer@@YAKKPAXK@Z				; AddTimer
PUBLIC	?RemoveTimer@@YAHK@Z				; RemoveTimer
PUBLIC	?RemoveAllTimer@@YAXXZ				; RemoveAllTimer
PUBLIC	?PauseTimer@@YAHK@Z				; PauseTimer
PUBLIC	?ResumeTimer@@YAHK@Z				; ResumeTimer
PUBLIC	?TimerThread@@YGIPAX@Z				; TimerThread
PUBLIC	?OnTimer@@YGXPAXE@Z				; OnTimer
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__ResetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__beginthreadex:PROC
EXTRN	__endthreadex:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odspy
_TEXT	SEGMENT
_hEvent$ = -4						; size = 4
_pvContext$ = 8						; size = 4
_fTimeout$ = 12						; size = 1
?OnTimer@@YGXPAXE@Z PROC				; OnTimer
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 93
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 94
  00004	8b 45 08	 mov	 eax, DWORD PTR _pvContext$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _hEvent$[ebp], eax
; Line 95
  0000a	ff 75 fc	 push	 DWORD PTR _hEvent$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 96
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?OnTimer@@YGXPAXE@Z ENDP				; OnTimer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_hStopper$ = -24					; size = 4
_hEventArray$ = -20					; size = 4
_dwTime$ = -16						; size = 4
_dwEventIndex$ = -12					; size = 4
_hEvent$ = -8						; size = 4
_dwTimerIndex$ = -4					; size = 4
_lpVoid$ = 8						; size = 4
?TimerThread@@YGIPAX@Z PROC				; TimerThread
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 35
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; Line 37
  00006	8b 45 08	 mov	 eax, DWORD PTR _lpVoid$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _dwTimerIndex$[ebp], eax
; Line 40
  0000c	6b 45 fc 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00010	05 04 00 00 00	 add	 eax, OFFSET ?TimerHandle@@3PAUTIMER_HANDLE@@A+4
  00015	89 45 ec	 mov	 DWORD PTR _hEventArray$[ebp], eax
; Line 41
  00018	6b 45 fc 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0001c	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax]
  00022	89 45 f0	 mov	 DWORD PTR _dwTime$[ebp], eax
; Line 42
  00025	6b 45 fc 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00029	8b 80 10 00 00
	00		 mov	 eax, DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+16]
  0002f	89 45 e8	 mov	 DWORD PTR _hStopper$[ebp], eax
; Line 43
  00032	6b 45 fc 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00036	8b 80 14 00 00
	00		 mov	 eax, DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+20]
  0003c	89 45 f8	 mov	 DWORD PTR _hEvent$[ebp], eax
; Line 45
  0003f	6b 45 fc 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00043	ff b0 20 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+32]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
$LN6@TimerThrea:
; Line 48
  0004f	33 c0		 xor	 eax, eax
  00051	40		 inc	 eax
  00052	74 72		 je	 SHORT $seg_finish$9
$lb_loop$10:
; Line 51
  00054	ff 75 f0	 push	 DWORD PTR _dwTime$[ebp]
  00057	6a 00		 push	 0
  00059	ff 75 ec	 push	 DWORD PTR _hEventArray$[ebp]
  0005c	6a 02		 push	 2
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForMultipleObjects@16
  00064	89 45 f4	 mov	 DWORD PTR _dwEventIndex$[ebp], eax
; Line 53
  00067	83 7d f4 01	 cmp	 DWORD PTR _dwEventIndex$[ebp], 1
  0006b	75 0d		 jne	 SHORT $LN4@TimerThrea
; Line 56
  0006d	ff 75 f8	 push	 DWORD PTR _hEvent$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ResetEvent@4
; Line 57
  00076	eb 4e		 jmp	 SHORT $seg_finish$9
  00078	eb 4c		 jmp	 SHORT $seg_finish$9
$LN4@TimerThrea:
; Line 60
  0007a	83 7d f4 00	 cmp	 DWORD PTR _dwEventIndex$[ebp], 0
  0007e	75 36		 jne	 SHORT $LN2@TimerThrea
; Line 63
  00080	ff 75 f8	 push	 DWORD PTR _hEvent$[ebp]
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ResetEvent@4
; Line 65
  00089	6b 45 fc 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0008d	ff b0 0c 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+12]
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 68
  00099	6a ff		 push	 -1
  0009b	ff 75 e8	 push	 DWORD PTR _hStopper$[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 72
  000a4	6b 45 fc 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  000a8	ff b0 0c 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+12]
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 73
  000b4	eb 9e		 jmp	 SHORT $lb_loop$10
$LN2@TimerThrea:
; Line 76
  000b6	ff 75 f8	 push	 DWORD PTR _hEvent$[ebp]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
  000bf	85 c0		 test	 eax, eax
  000c1	75 01		 jne	 SHORT $LN1@TimerThrea
; Line 77
  000c3	cc		 int	 3
$LN1@TimerThrea:
; Line 78
  000c4	eb 89		 jmp	 SHORT $LN6@TimerThrea
$seg_finish$9:
; Line 81
  000c6	6a 00		 push	 0
  000c8	e8 00 00 00 00	 call	 __endthreadex
  000cd	59		 pop	 ecx
; Line 82
  000ce	33 c0		 xor	 eax, eax
; Line 83
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
?TimerThread@@YGIPAX@Z ENDP				; TimerThread
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_bResult$ = -4						; size = 4
_dwTimerIndex$ = 8					; size = 4
?ResumeTimer@@YAHK@Z PROC				; ResumeTimer
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 174
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 175
  00004	83 65 fc 00	 and	 DWORD PTR _bResult$[ebp], 0
; Line 176
  00008	83 7d 08 20	 cmp	 DWORD PTR _dwTimerIndex$[ebp], 32 ; 00000020H
  0000c	72 04		 jb	 SHORT $LN4@ResumeTime
; Line 177
  0000e	eb 5d		 jmp	 SHORT $lb_return$7
  00010	eb 5b		 jmp	 SHORT $lb_return$7
$LN4@ResumeTime:
; Line 179
  00012	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 180
  0001d	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00021	83 b8 18 00 00
	00 00		 cmp	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+24], 0
  00028	75 04		 jne	 SHORT $LN2@ResumeTime
; Line 181
  0002a	eb 36		 jmp	 SHORT $lb_false_and_unlock$8
  0002c	eb 34		 jmp	 SHORT $lb_false_and_unlock$8
$LN2@ResumeTime:
; Line 183
  0002e	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00032	ff b0 10 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+16]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 184
  0003e	6a ff		 push	 -1
  00040	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00044	ff b0 0c 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+12]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 185
  00050	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00054	83 a0 18 00 00
	00 00		 and	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+24], 0
; Line 186
  0005b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1
$lb_false_and_unlock$8:
; Line 189
  00062	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$lb_return$7:
; Line 192
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]
; Line 194
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?ResumeTimer@@YAHK@Z ENDP				; ResumeTimer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_bResult$ = -4						; size = 4
_dwTimerIndex$ = 8					; size = 4
?PauseTimer@@YAHK@Z PROC				; PauseTimer
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 146
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 148
  00004	83 65 fc 00	 and	 DWORD PTR _bResult$[ebp], 0
; Line 149
  00008	83 7d 08 20	 cmp	 DWORD PTR _dwTimerIndex$[ebp], 32 ; 00000020H
  0000c	72 04		 jb	 SHORT $LN6@PauseTimer
; Line 150
  0000e	eb 78		 jmp	 SHORT $lb_return$9
  00010	eb 76		 jmp	 SHORT $lb_return$9
$LN6@PauseTimer:
; Line 152
  00012	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 153
  0001d	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00021	83 b8 18 00 00
	00 00		 cmp	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+24], 0
  00028	74 04		 je	 SHORT $LN4@PauseTimer
; Line 154
  0002a	eb 51		 jmp	 SHORT $lb_false_and_unlock$10
  0002c	eb 4f		 jmp	 SHORT $lb_false_and_unlock$10
$LN4@PauseTimer:
; Line 157
  0002e	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00032	83 b8 14 00 00
	00 00		 cmp	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+20], 0
  00039	75 04		 jne	 SHORT $LN2@PauseTimer
; Line 158
  0003b	eb 40		 jmp	 SHORT $lb_false_and_unlock$10
  0003d	eb 3e		 jmp	 SHORT $lb_false_and_unlock$10
$LN2@PauseTimer:
; Line 160
  0003f	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00043	6a 04		 push	 4
  00045	59		 pop	 ecx
  00046	6b c9 00	 imul	 ecx, ecx, 0
  00049	ff b4 08 04 00
	00 00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+ecx+4]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 161
  00056	6a ff		 push	 -1
  00058	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0005c	ff b0 0c 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+12]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 162
  00068	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0006c	c7 80 18 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+24], 1
; Line 163
  00076	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1
$lb_false_and_unlock$10:
; Line 166
  0007d	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$lb_return$9:
; Line 169
  00088	8b 45 fc	 mov	 eax, DWORD PTR _bResult$[ebp]
; Line 171
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
?PauseTimer@@YAHK@Z ENDP				; PauseTimer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?RemoveAllTimer@@YAXXZ PROC				; RemoveAllTimer
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 237
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; Line 238
  00004	83 65 fc 00	 and	 DWORD PTR _i$1[ebp], 0
  00008	eb 07		 jmp	 SHORT $LN3@RemoveAllT
$LN2@RemoveAllT:
  0000a	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0000d	40		 inc	 eax
  0000e	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@RemoveAllT:
  00011	83 7d fc 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  00015	73 0b		 jae	 SHORT $LN4@RemoveAllT
; Line 240
  00017	ff 75 fc	 push	 DWORD PTR _i$1[ebp]
  0001a	e8 00 00 00 00	 call	 ?RemoveTimer@@YAHK@Z	; RemoveTimer
  0001f	59		 pop	 ecx
; Line 242
  00020	eb e8		 jmp	 SHORT $LN2@RemoveAllT
$LN4@RemoveAllT:
; Line 243
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?RemoveAllTimer@@YAXXZ ENDP				; RemoveAllTimer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_bResult$ = -8						; size = 4
_i$ = -4						; size = 4
_dwTimerIndex$ = 8					; size = 4
?RemoveTimer@@YAHK@Z PROC				; RemoveTimer
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 197
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
; Line 198
  00005	83 65 f8 00	 and	 DWORD PTR _bResult$[ebp], 0
; Line 202
  00009	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 204
  00014	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00018	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+28], 0
  0001f	75 0a		 jne	 SHORT $LN5@RemoveTime
; Line 205
  00021	e9 ee 00 00 00	 jmp	 $lb_return$8
  00026	e9 e9 00 00 00	 jmp	 $lb_return$8
$LN5@RemoveTime:
; Line 207
  0002b	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0002f	6a 04		 push	 4
  00031	59		 pop	 ecx
  00032	c1 e1 00	 shl	 ecx, 0
  00035	ff b4 08 04 00
	00 00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+ecx+4]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 210
  00042	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00046	ff b0 10 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+16]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
; Line 211
  00052	6a ff		 push	 -1
  00054	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00058	ff b0 1c 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+28]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
; Line 213
  00064	83 65 fc 00	 and	 DWORD PTR _i$[ebp], 0
  00068	eb 07		 jmp	 SHORT $LN3@RemoveTime
$LN2@RemoveTime:
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006d	40		 inc	 eax
  0006e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@RemoveTime:
  00071	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  00075	73 40		 jae	 SHORT $LN1@RemoveTime
; Line 215
  00077	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007e	ff b4 88 04 00
	00 00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+ecx*4+4]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 216
  0008b	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00092	83 a4 88 04 00
	00 00 00	 and	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+ecx*4+4], 0
; Line 217
  0009a	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0009e	ff b0 0c 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+12]
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 218
  000aa	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  000ae	83 a0 0c 00 00
	00 00		 and	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+12], 0
; Line 219
  000b5	eb b3		 jmp	 SHORT $LN2@RemoveTime
$LN1@RemoveTime:
; Line 220
  000b7	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  000bb	ff b0 10 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+16]
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 221
  000c7	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  000cb	ff b0 20 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+32]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 223
  000d7	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  000db	ff b0 1c 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+28]
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
; Line 224
  000e7	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  000eb	83 a0 1c 00 00
	00 00		 and	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+28], 0
; Line 225
  000f2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bResult$[ebp], 1
; Line 226
  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_dwTimerNum@@3KA ; g_dwTimerNum
  000fe	48		 dec	 eax
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?g_dwTimerNum@@3KA, eax ; g_dwTimerNum
; Line 228
  00104	6b 45 08 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  00108	ff b0 14 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+20]
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ResetEvent@4
$lb_return$8:
; Line 231
  00114	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; Line 232
  0011f	8b 45 f8	 mov	 eax, DWORD PTR _bResult$[ebp]
; Line 233
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
?RemoveTimer@@YAHK@Z ENDP				; RemoveTimer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
_hThread$ = -12						; size = 4
_ThreadID$ = -8						; size = 4
_i$ = -4						; size = 4
_dwPerioedTime$ = 8					; size = 4
_hEvent$ = 12						; size = 4
_dwTimerIndex$ = 16					; size = 4
?AddTimer@@YAKKPAXK@Z PROC				; AddTimer
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 100
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; Line 103
  00006	83 65 f4 00	 and	 DWORD PTR _hThread$[ebp], 0
; Line 105
  0000a	83 65 f8 00	 and	 DWORD PTR _ThreadID$[ebp], 0
; Line 106
  0000e	83 7d 10 20	 cmp	 DWORD PTR _dwTimerIndex$[ebp], 32 ; 00000020H
  00012	72 0a		 jb	 SHORT $LN7@AddTimer
; Line 107
  00014	e9 2a 01 00 00	 jmp	 $lb_return$10
  00019	e9 25 01 00 00	 jmp	 $lb_return$10
$LN7@AddTimer:
; Line 109
  0001e	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; Line 113
  00029	6b 45 10 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _dwPerioedTime$[ebp]
  00030	89 88 00 00 00
	00		 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax], ecx
; Line 116
  00036	83 65 fc 00	 and	 DWORD PTR _i$[ebp], 0
  0003a	eb 07		 jmp	 SHORT $LN5@AddTimer
$LN4@AddTimer:
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003f	40		 inc	 eax
  00040	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN5@AddTimer:
  00043	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  00047	73 1e		 jae	 SHORT $LN3@AddTimer
; Line 118
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  00057	6b 4d 10 24	 imul	 ecx, DWORD PTR _dwTimerIndex$[ebp], 36
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0005e	89 84 91 04 00
	00 00		 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[ecx+edx*4+4], eax
; Line 119
  00065	eb d5		 jmp	 SHORT $LN4@AddTimer
$LN3@AddTimer:
; Line 120
  00067	6b 45 10 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0006b	83 a0 18 00 00
	00 00		 and	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+24], 0
; Line 121
  00072	6a 00		 push	 0
  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	6a 00		 push	 0
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  00080	6b 4d 10 24	 imul	 ecx, DWORD PTR _dwTimerIndex$[ebp], 36
  00084	89 81 10 00 00
	00		 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[ecx+16], eax
; Line 122
  0008a	6b 45 10 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0008e	8b 4d 0c	 mov	 ecx, DWORD PTR _hEvent$[ebp]
  00091	89 88 14 00 00
	00		 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+20], ecx
; Line 123
  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  000a5	6b 4d 10 24	 imul	 ecx, DWORD PTR _dwTimerIndex$[ebp], 36
  000a9	89 81 0c 00 00
	00		 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[ecx+12], eax
; Line 124
  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  000bd	6b 4d 10 24	 imul	 ecx, DWORD PTR _dwTimerIndex$[ebp], 36
  000c1	89 81 20 00 00
	00		 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[ecx+32], eax
; Line 125
  000c7	8d 45 f8	 lea	 eax, DWORD PTR _ThreadID$[ebp]
  000ca	50		 push	 eax
  000cb	6a 00		 push	 0
  000cd	ff 75 10	 push	 DWORD PTR _dwTimerIndex$[ebp]
  000d0	68 00 00 00 00	 push	 OFFSET ?TimerThread@@YGIPAX@Z ; TimerThread
  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	e8 00 00 00 00	 call	 __beginthreadex
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	6b 4d 10 24	 imul	 ecx, DWORD PTR _dwTimerIndex$[ebp], 36
  000e5	89 81 1c 00 00
	00		 mov	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[ecx+28], eax
; Line 127
  000eb	6b 45 10 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  000ef	83 b8 1c 00 00
	00 ff		 cmp	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+28], -1
  000f6	75 18		 jne	 SHORT $LN2@AddTimer
; Line 129
  000f8	6a 00		 push	 0
  000fa	68 00 00 00 00	 push	 OFFSET $SG91163
  000ff	68 00 00 00 00	 push	 OFFSET $SG91164
  00104	6a 00		 push	 0
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
; Line 130
  0010c	eb 2a		 jmp	 SHORT $lb_exit$11
  0010e	eb 28		 jmp	 SHORT $lb_exit$11
$LN2@AddTimer:
; Line 133
  00110	6a 0f		 push	 15			; 0000000fH
  00112	ff 75 f4	 push	 DWORD PTR _hThread$[ebp]
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8
; Line 135
  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_dwTimerNum@@3KA ; g_dwTimerNum
  00120	40		 inc	 eax
  00121	a3 00 00 00 00	 mov	 DWORD PTR ?g_dwTimerNum@@3KA, eax ; g_dwTimerNum
; Line 136
  00126	6a ff		 push	 -1
  00128	6b 45 10 24	 imul	 eax, DWORD PTR _dwTimerIndex$[ebp], 36
  0012c	ff b0 20 00 00
	00		 push	 DWORD PTR ?TimerHandle@@3PAUTIMER_HANDLE@@A[eax+32]
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
$lb_exit$11:
; Line 139
  00138	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$lb_return$10:
; Line 142
  00143	8b 45 10	 mov	 eax, DWORD PTR _dwTimerIndex$[ebp]
; Line 143
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
?AddTimer@@YAKKPAXK@Z ENDP				; AddTimer
_TEXT	ENDS
; Function compile flags: /Odspy
_TEXT	SEGMENT
?InitializeTimer@@YAXXZ PROC				; InitializeTimer
; File e:\github\mso_code\4dyuchinet_latest\timer.cpp
; Line 86
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 87
  00003	68 80 04 00 00	 push	 1152			; 00000480H
  00008	6a 00		 push	 0
  0000a	68 00 00 00 00	 push	 OFFSET ?TimerHandle@@3PAUTIMER_HANDLE@@A ; TimerHandle
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 88
  00017	68 00 00 00 00	 push	 OFFSET ?g_csTimer@@3U_RTL_CRITICAL_SECTION@@A ; g_csTimer
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
; Line 89
  00022	83 25 00 00 00
	00 00		 and	 DWORD PTR ?g_dwTimerNum@@3KA, 0 ; g_dwTimerNum
; Line 90
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?InitializeTimer@@YAXXZ ENDP				; InitializeTimer
_TEXT	ENDS
END
